Course Introduction and Welcome:\n 
Welcome to Introduction to Python course!\n
In this course, we will learn the basics of Python programming language and how to use it to solve various problems.\n
Throughout the course, we will cover topics such as data types, variables, operators, control structures, functions, file input/output, object-oriented programming, and working with libraries and modules.\n
We will also explore more advanced topics such as working with APIs, web scraping, and automation. By the end of the course, you will have a solid understanding of Python programming language and the skills to apply it to real-world projects.\n

Course Objectives and Outcomes: The learning objectives and expected outcomes of the course, including what students will be able to do or know after completing the course.
done

Course Outline and Schedule: A detailed breakdown of the course outline and schedule, including the number of lessons, duration of each lesson, and any assignments or assessments.


A variable is like a container for information: it stores values of different types depending on the use case.
Variables are really important in programming because this storage of data allows use later in the program.


Type conversion, also known as casting, refers to the process of converting one data type to another.\nIn Python, you can convert between primitive data types using built-in functions such as int(), float(), str(), and bool().\nFor example, you can use int() to convert a string containing a number to an integer, or float() to convert an integer or string to a floating-point number.\nSimilarly, you can use str() to convert a number to a string, or bool() to convert a value to either True or False.\nIt's important to note that some conversions may result in a loss of precision or information, so it's always best to use the appropriate conversion function for the desired result.

"# Converting a string to an integer:\nage_str = '27'\nage_int = int(age_str)\nprint(age_int)  # Output: 27\n\n# Converting a float to an integer:\nprice_float = 9.99\nprice_int = int(price_float)\nprint(price_int)  # Output: 9\n\n# Converting an integer to a string:\ncount_int = 10\ncount_str = str(count_int)\nprint(count_str)  # Output: "10"\n\n# Converting a boolean to an integer:\nis_true = True\nis_false = False\nint_true = int(is_true)\nint_false = int(is_false)\nprint(int_true)   # Output: 1\nprint(int_false)  # Output: 0\n\n# Converting a string to a boolean:\nis_true_str = "True"\nis_false_str = "False"\nbool_true = bool(is_true_str)\nbool_false = bool(is_false_str)\nprint(bool_true)   # Output: True\nprint(bool_false)  # Output: True (any non-empty string is considered True)



# Example 1: if statement\nx = 7\nif x > 5:\n    print("x is greater than 5")\n\n# Example 2: if-else statement\nx = 2\nif x > 5:\n    print("x is greater than 5")\nelse:\n    print("x is less than or equal to 5")\n\n# Example 3: if-elif-else statement\nx = 12\nif x < 5:\n    print("x is less than 5")\nelif x > 10:\n    print("x is greater than 10")\nelse:\n    print("x is between 5 and 10")\n\nThe following code outputs:\nx is greater than 5\nx is less than or equal to 5\nx is greater than 10


# Example 1: For loop\nnumbers = [1, 2, 3, 4, 5]\nfor num in numbers:\n    print(num)\n# Output: 1 2 3 4 5\n\nword = "hello"\nfor letter in word:\n    print(letter)\n# Output: h e l l o\n\n# Example 2: While loop\ni = 0\nwhile i < 5:\n    print(i)\n    i += 1\n# Output: 0 1 2 3 4\n# Example 3: Range function with for loop\nfor i in range(5):\n    print(i)\n# Output: 0 1 2 3 4\n\n# Example 4: Enumerate function with for loop\nfruits = ["apple", "banana", "cherry"]\nfor i, fruit in enumerate(fruits):\n    print(i, fruit)\n# Output: 0 apple 1 banana 2 cherry\n\n# Example 5: Zip function with for loop\nnames = ["Alice", "Bob", "Charlie"]\nages = [25, 30, 35]\nfor name, age in zip(names, ages):\n    print(name, age)\n# Output: Alice 25 Bob 30 Charlie 35\n\n# Example 6: Break statement in for loop\nnumbers = [1, 2, 3, 4, 5]\nfor num in numbers:\n    if num == 3:\n        break\n    print(num)\n# Output: 1 2\n\n# Example 7: Continue statement in for loop\nnumbers = [1, 2, 3, 4, 5]\nfor num in numbers:\n    if num == 3:\n        continue\n    print(num)\n# Output: 1 2 4 5

In Python, logical operators are used to evaluate logical expressions and return a boolean value of either True or False.\nThere are three logical operators in Python: \"and\", \"or\", and \"not\".\nThe \"and\" operator returns True if both expressions being evaluated are True, otherwise it returns False.\nThe \"or\" operator returns True if at least one of the expressions being evaluated is True, otherwise it returns False.\nFinally, the \"not\" operator returns the opposite boolean value of the expression it is evaluating.\nLogical operators are often used in conditional statements such as \"if\" statements and \"while\" loops to control program flow based on logical conditions.\nThey can also be used in conjunction with comparison operators to create more complex logical expressions.\nOverall, logical operators are an essential tool for writing programs that can make decisions based on logical conditions. Here are some examples:\na = 5\nb = 10\nc = 15\n\n# using AND operator\nif a < b and b < c:\n    print(\"Both conditions are true.\")\n# output: Both conditions are true.\n\n# using OR operator\nif a < b or a > c:\n    print(\"At least one condition is true.\")\n# output: At least one condition is true.\n\n# using NOT operator\nif not(a > b):\n    print(\"a is not greater than b.\")\n# output: a is not greater than b.

A function is defined using the "def" keyword, followed by the function name and parentheses.\nInside the parentheses, you can define parameters for the function to take as input.\nThe body of the function is indented and contains the code to be executed when the function is called.\nTo call a function, you simply need to write the function name followed by parentheses, and pass any necessary arguments inside the parentheses.\nFunctions can also return values using the "return" keyword.\nHere are some examples:\n# Function that prints a welcome message with a name parameter\ndef welcome(name):\n    print(f"Welcome, {name}!")\n\n# Function that calculates the sum of two numbers with two parameters\ndef add_numbers(num1, num2):\n    sum = num1 + num2\n    return sum\n\n# Call the welcome function with the name parameter "Alice"\nwelcome("Alice") #Output: Welcome, Alice!\n\n# Call the add_numbers function with the parameters 3 and 5, and print the result\nresult = add_numbers(3, 5)\nprint(f"The sum of 3 and 5 is: {result}") #Output: The sum of 3 and 5 is: 8

Python has a large number of built-in modules that provide useful functionality out of the box.\nThese modules are pre-written code libraries that extend the capabilities of Python and can be imported into programs.\nSome of the commonly used built-in modules include math, os, sys, random, and datetime.\nThe math module provides functions for mathematical operations such as trigonometric functions, logarithms, and constants such as pi and e.\nThe os and sys modules provide functions for interacting with the operating system, such as file operations, environment variables, and system configuration.\nThe random module provides functions for generating random numbers and selecting random elements from sequences.\nThe datetime module provides classes for working with dates and times, such as calculating time differences and formatting dates for display.\nOverall, the built-in modules provide a wide range of functionality and can greatly simplify the development process for many applications.\nHere are some examples:\n

\nimport datetime\n\ncurrent_time = datetime.datetime.now()\nprint("Current date and time: ", current_time) #Output: Current date and time: 2023-25-03 13:45:32.123456\n\nimport random\n\nrandom_number = random.randint(1, 10)\nprint("Random number between 1 and 10: ", random_number) #Output: Random number between 1 and 10: 8\n\nimport math\na = 16\nprint(math.sqrt(a))  # Output: 4.0