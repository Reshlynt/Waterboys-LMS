[
  {
    "title": "Introduction to Python",
    "difficulty": "BEGINNER",
    "author": "Mr. Cole",
    "teacher_id": "6ee074ab-189e-4508-9574-972f77fb2812",
    "course_id": "e58ed763-928c-4155-bee9-fdbaaadc15f4",
    "courseType": "PYTHON",
    "modules": [
      {
        "module_title": "Course Introduction",
        "slides": [
          {
            "slide_title": "Course Introduction and Welcome",
            "description": "Welcome to Introduction to Python course!\n\nIn this course, we will learn the basics of Python programming language and how to use it to solve various problems.\n\nThroughout the course, we will cover topics such as data types, variables, operators, control structures, functions, file input/output, object-oriented programming, and working with libraries and modules.\n\nWe will also explore more advanced topics such as working with APIs, web scraping, and automation.\n\nBy the end of the course, you will have a solid understanding of Python programming language and the skills to apply it to real-world projects.\n"
          },
          {
            "slide_title": "Course Objectives and Outcomes",
            "description": "In this section, we will discuss the objectives and outcomes of the course.\n\nBy the end of this course, you will be able to write Python programs to solve various real-world problems.\n\nYou will have a good understanding of the Python programming language and be familiar with its syntax, data structures, control structures, functions, and object-oriented programming concepts.\n\nYou will also be able to work with files, APIs, web scraping, and automation using Python.\n\nOverall, this course aims to equip you with the fundamental skills and knowledge required to start your journey as a Python programmer.\n"
          },
          {
            "slide_title": "Course Outline",
            "description": "1. Course Overview\n2. Getting Started with Python\n3. Variables and Data Types\n4. Control Flow and Loops\n5. Functions and Modules\n6. Lists, Tuples, and Dictionaries\n7. File Handling and Input/Output\n8. Object-Oriented Programming (OOP)\n9. Advanced Topics in Python"
          }
        ],
        "quiz": [],
        "module_comments": []
      },
      {
        "module_title": "Getting Started with Python",
        "slides": [
          {
            "slide_title": "Another Introduction to Python",
            "description": "Python is what is considered to be a high-level, general interpreted programming language that is dynamically typed and supports a variety of programming paradigms such as procedural programming, object-oriented programming and functional programming.\nOriginally released in 1991 by Guido van Rossum and is considered to be the most popular programming language used today and one of the easiest to teach individuals."
          },
          {
            "slide_title": "Setting up your Python Workspace",
            "description": "Setting up your workspace will require a few steps:\n First download/setup the anaconda installer following this link: https://www.anaconda.com/products/distribution\nMake sure that you have the bin in your global computer file path.\nMake sure you have Jupyter Notebook installed, and you will be able to open jupyter-notebook by typing 'jupyter-notebook' in your command terminal(cmd or terminal).\n Jupyter will be our primary mode of coding in python, so it is imperative that you install it properly and ask me if you have any questions https://jupyter-notebook-beginner-guide.readthedocs.io/en/latest/execute.html#:~:text=1.,will%20contain%20all%20the%20notebooks.\n"
          }
        ],
        "quiz": [
          {
            "question": "What is Python?",
            "answer_choices": [
              {
                "a": "A markup language",
                "b": "A low-level programming language",
                "c": "A compiled programming language",
                "d": "A high-level, general interpreted programming language"
              }
            ],
            "correct_answer": "d"
          },
          {
            "question": "Who originally created Python?",
            "answer_choices": [
              {
                "a": "Bill Gates",
                "b": "Linus Torvalds",
                "c": "Guido Von Rossum",
                "d": "Steve Jobs"
              }
            ],
            "correct_answer": "c"
          },
          {
            "question": "What is the primary mode of coding in Python for this module?",
            "answer_choices": [
              {
                "a": "Jupyter Notebook",
                "b": "Visual Studio Code",
                "c": "PyCharm",
                "d": "Eclipse"
              }
            ],
            "correct_answer": "a"
          },
          {
            "question": "What are some programming paradigms supported by Python?",
            "answer_choices": [
              {
                "a": "Procedural programming, object-oriented programming, and functional programming",
                "b": "Imperative programming only",
                "c": "Declarative programming only",
                "d": "Object-oriented programming only"
              }
            ],
            "correct_answer": "a"
          }
        ],
        "module_comments": []
      },
      {
        "module_title": "Variables and Data Types",
        "slides": [
          {
            "slide_title": "Working with Variables",
            "description": "Variable names must start with a letter or underscore, and can be followed by letters, digits, or underscores.\n Variable names are case-sensitive, so 'my_var' and 'My_Var' are two different variables.\n Declaring Variables Using the Assignment Operator '='\n To declare a variable in Python, simply assign a value to it using the '=' operator.\n For example, to declare a variable 'x' with a value of 10, we would write 'x = 10'.\n Understanding Data Types in Python:\n Python supports several data types, including numeric types (integers and floats), strings, and booleans.\n Numeric types represent numbers, strings represent text, and booleans represent true or false values.\n\nExamples of Declaring Variables of Different Data Types\nTo declare a variable of type integer, we can assign an integer value to it, such as 'x = 5'.\nTo declare a variable of type string, we can enclose a string value in quotation marks, such as ' name = 'John' '.\nTo declare a variable of type boolean, we can assign a true/false value to it, such as hasFriends = false or isSad = true\n\n Unlike in java, python is much more flexible with data types, which is why we have to be much more careful about making mistakes and keeping track of what data types are store in each variable of our own accord.\nCommenting your code by typing '#' followed by your comment is an easy way to keep track of what is in what."
          },
          {
            "slide_title": "Another Introduction to Python",
            "description": "Python has several primitive data types, including integers, floats, booleans, and strings.\nIntegers are whole numbers without a decimal point, while floats are numbers with a decimal point.\nBooleans are either True or False and are often used for logical expressions.\nStrings are sequences of characters enclosed in quotes, either single quotes('') or double quotes (\"\").\nAdditionally, there are two more advanced primitive data types: lists and dictionaries, but we will cover these in depth later. \nLists are ordered collections of items, and dictionaries are unordered collections of key-value pairs.\nThese primitive data types form the building blocks of more complex data structures in Python."
          },
          {
            "slide_title": "Type Conversion and Casting",
            "description": "Type conversion, also known as casting, refers to the process of converting one data type to another.\nIn Python, you can convert between primitive data types using built-in functions such as int(), float(), str(), and bool().\nFor example, you can use int() to convert a string containing a number to an integer, or float() to convert an integer or string to a floating-point number.\nSimilarly, you can use str() to convert a number to a string, or bool() to convert a value to either True or False.\nIt's important to note that some conversions may result in a loss of precision or information, so it's always best to use the appropriate conversion function for the desired result.\n\nHere is some sample python code illustrating the capabilities of these functions:\n# Converting a string to an integer:\nage_str = '27'\nage_int = int(age_str)\nprint(age_int)  # Output: 27\n\n# Converting a float to an integer:\nprice_float = 9.99\nprice_int = int(price_float)\nprint(price_int)  # Output: 9\n\n# Converting an integer to a string:\ncount_int = 10\ncount_str = str(count_int)\nprint(count_str)  # Output: \"10\"\n\n# Converting a boolean to an integer:\nis_true = True\nis_false = False\nint_true = int(is_true)\nint_false = int(is_false)\nprint(int_true)   # Output: 1\nprint(int_false)  # Output: 0\n\n# Converting a string to a boolean:\nis_true_str = \"True\"\nis_false_str = \"False\"\nbool_true = bool(is_true_str)\nbool_false = bool(is_false_str)\nprint(bool_true)   # Output: True\nprint(bool_false)  # Output: True (any non-empty string is considered True)"
          }
        ],
        "quiz": [
          {
            "question": "What is the naming convention for Python variables?",
            "answer_choices": [
              {
                "a": "Start with a digit, followed by letters or underscores",
                "b": "Start with a letter or underscore, followed by letters, digits or underscores",
                "c": "Start with an underscore, followed by letters, digits or underscores",
                "d": "Start with a letter, followed by letters or digits"
              }
            ],
            "correct_answer": "b"
          },
          {
            "question": "What data types are supported in Python?",
            "answer_choices": [
              {
                "a": "Numeric types (integers and floats), strings, and booleans",
                "b": "Numeric types (integers and floats) and strings",
                "c": "Strings and booleans",
                "d": "Numeric types (integers, floats, and complex numbers), strings, and booleans"
              }
            ],
            "correct_answer": "a"
          },
          {
            "question": "What is the difference between integers and floats?",
            "answer_choices": [
              {
                "a": "Integers are whole numbers without a decimal point, while floats are numbers with a decimal point",
                "b": "Integers are numbers with a decimal point, while floats are whole numbers without a decimal point",
                "c": "Integers and floats are the same data type",
                "d": "Integers and floats are only used in advanced Python programming"
              }
            ],
            "correct_answer": "a"
          },
          {
            "question": "What are lists and dictionaries in Python?",
            "answer_choices": [
              {
                "a": "Lists are unordered collections of key-value pairs, and dictionaries are ordered collections of items",
                "b": "Lists are ordered collections of items, and dictionaries are unordered collections of key-value pairs",
                "c": "Lists and dictionaries are the same data type",
                "d": "Lists and dictionaries are only used in advanced Python programming"
              }
            ],
            "correct_answer": "b"
          },
          {
            "question": "What is type conversion in Python?",
            "answer_choices": [
              {
                "a": "It refers to the process of converting one data type to another",
                "b": "It refers to the process of converting a string to an integer",
                "c": "It refers to the process of converting a boolean to a string",
                "d": "It refers to the process of converting an integer to a boolean"
              }
            ],
            "correct_answer": "a"
          },
          {
            "question": "Which built-in function can be used to convert a string to an integer?",
            "answer_choices": [
              {
                "a": "str()",
                "b": "float()",
                "c": "int()",
                "d": "bool()"
              }
            ],
            "correct_answer": "c"
          },
          {
            "question": "What is the correct syntax to declare a variable in Python?",
            "answer_choices": [
              {
                "a": "variable_name = value",
                "b": "value = variable_name",
                "c": "variable_name == value",
                "d": "value == variable_name"
              }
            ],
            "correct_answer": "a"
          }
        ],
        "module_comments": []
      },
      {
        "module_title": "Control Flow and Loops",
        "slides": [
          {
            "slide_title": "Conditional Statements",
            "description": "In Python, conditional statements are used to make decisions based on certain conditions.\nThe most common conditional statement is the \"if\" statement, which executes a block of code only if a specific condition is true.\nIn addition to the \"if\" statement, Python also has \"else\" and \"elif\" statements, which are used to create more complex decision-making structures.\n\n# Example 1: if statement\nx = 7\nif x > 5:\n    print(\"x is greater than 5\")\n\n# Example 2: if-else statement\nx = 2\nif x > 5:\n    print(\"x is greater than 5\")\nelse:\n    print(\"x is less than or equal to 5\")\n\n# Example 3: if-elif-else statement\nx = 12\nif x < 5:\n    print(\"x is less than 5\")\nelif x > 10:\n    print(\"x is greater than 10\")\nelse:\n    print(\"x is between 5 and 10\")\n\nThe following code outputs:\nx is greater than 5\nx is less than or equal to 5\nx is greater than 10"
          },
          {
            "slide_title": "Loops and Iterations",
            "description": "# Example 1: For loop\nnumbers = [1, 2, 3, 4, 5]\nfor num in numbers:\n    print(num)\n# Output: 1 2 3 4 5\n\nword = \"hello\"\nfor letter in word:\n    print(letter)\n# Output: h e l l o\n\n# Example 2: While loop\ni = 0\nwhile i < 5:\n    print(i)\n    i += 1\n# Output: 0 1 2 3 4\n# Example 3: Range function with for loop\nfor i in range(5):\n    print(i)\n# Output: 0 1 2 3 4\n\n# Example 4: Enumerate function with for loop\nfruits = [\"apple\", \"banana\", \"cherry\"]\nfor i, fruit in enumerate(fruits):\n    print(i, fruit)\n# Output: 0 apple 1 banana 2 cherry\n\n# Example 5: Zip function with for loop\nnames = [\"Alice\", \"Bob\", \"Charlie\"]\nages = [25, 30, 35]\nfor name, age in zip(names, ages):\n    print(name, age)\n# Output: Alice 25 Bob 30 Charlie 35\n\n# Example 6: Break statement in for loop\nnumbers = [1, 2, 3, 4, 5]\nfor num in numbers:\n    if num == 3:\n        break\n    print(num)\n# Output: 1 2\n\n# Example 7: Continue statement in for loop\nnumbers = [1, 2, 3, 4, 5]\nfor num in numbers:\n    if num == 3:\n        continue\n    print(num)\n# Output: 1 2 4 5"
          },
          {
            "slide_title": "Control Flow and Logical Operators",
            "description": "In Python, logical operators are used to evaluate logical expressions and return a boolean value of either True or False.\nThere are three logical operators in Python: \"and\", \"or\", and \"not\".\nThe \"and\" operator returns True if both expressions being evaluated are True, otherwise it returns False.\nThe \"or\" operator returns True if at least one of the expressions being evaluated is True, otherwise it returns False.\nFinally, the \"not\" operator returns the opposite boolean value of the expression it is evaluating.\nLogical operators are often used in conditional statements such as \"if\" statements and \"while\" loops to control program flow based on logical conditions.\nThey can also be used in conjunction with comparison operators to create more complex logical expressions.\nOverall, logical operators are an essential tool for writing programs that can make decisions based on logical conditions.Here are some examples:\na = 5\nb = 10\nc = 15\n\n# using AND operator\nif a < b and b < c:\n    print(\"Both conditions are true.\")\n# output: Both conditions are true.\n\n# using OR operator\nif a < b or a > c:\n    print(\"At least one condition is true.\")\n# output: At least one condition is true.\n\n# using NOT operator\nif not(a > b):\n    print(\"a is not greater than b.\")\n# output: a is not greater than b."
          }
        ],
        "quiz": [
          {
            "question": "What is the most common conditional statement in Python?",
            "answer_choices": [
              {
                "a": "for",
                "b": "while",
                "c": "if",
                "d": "break"
              }
            ],
            "correct_answer": "c"
          },
          {
            "question": "What is the purpose of the \"else\" statement in Python?",
            "answer_choices": [
              {
                "a": "It is used to create more complex decision-making structures.",
                "b": "It is used to execute a block of code if a specific condition is true.",
                "c": "It is used to execute a block of code if a specific condition is false.",
                "d": "It is used to loop through a sequence of code."
              }
            ],
            "correct_answer": "c"
          },
          {
            "question": "Which of the following is an example of an if statement in Python?",
            "answer_choices": [
              {
                "a": "if-else",
                "b": "if-elif-else",
                "c": "while",
                "d": "for"
              }
            ],
            "correct_answer": "a"
          },
          {
            "question": "What is the output of the following code?\nx = 3\nif x < 5:\n    print(\"x is less than 5\")\nelse:\n    print(\"x is greater than or equal to 5\")",
            "answer_choices": [
              {
                "a": "x is less than 5",
                "b": "x is greater than or equal to 5",
                "c": "x is equal to 5",
                "d": "There is a syntax error in the code."
              }
            ],
            "correct_answer": "a"
          },
          {
            "question": "What is the difference between a for loop and a while loop in Python?",
            "answer_choices": [
              {
                "a": "A for loop iterates over a sequence, while a while loop repeatedly executes code as long as a condition is true.",
                "b": "A for loop and a while loop are the same thing.",
                "c": "A for loop executes a block of code once, while a while loop repeats the block of code until a condition is false.",
                "d": "A for loop is used for arithmetic operations, while a while loop is used for logical operations."
              }
            ],
            "correct_answer": "a"
          },
          {
            "question": "What is the output of the following code?\n\nnumbers = [2, 4, 6, 8]\nfor i in numbers:\n    print(i * 2)",
            "answer_choices": [
              {
                "a": "4 8 12 16",
                "b": "2 4 6 8",
                "c": "8 16 24 32",
                "d": "10 12 14 16"
              }
            ],
            "correct_answer": "c"
          },
          {
            "question": "What is the purpose of the break statement in a loop?",
            "answer_choices": [
              {
                "a": "To terminate the loop and skip any remaining iterations",
                "b": "To pause the loop and wait for user input",
                "c": "To execute a block of code once before the loop begins",
                "d": "To skip a single iteration of the loop and continue with the next one"
              }
            ],
            "correct_answer": "a"
          },
          {
            "question": "What is the output of the following code?\n\ni = 0\nwhile i < 3:\n    print(i)\n    i += 1",
            "answer_choices": [
              {
                "a": "0 1 2",
                "b": "1 2 3",
                "c": "0 2 4",
                "d": "1 4 7"
              }
            ],
            "correct_answer": "a"
          },
          {
            "question": "What are the three logical operators in Python?",
            "answer_choices": [
              {
                "a": "and, if, while",
                "b": "if, else, not",
                "c": "and, or, not",
                "d": "or, for, while"
              }
            ],
            "correct_answer": "c"
          },
          {
            "question": "What does the \"and\" operator return in Python?",
            "answer_choices": [
              {
                "a": "True if both expressions being evaluated are True",
                "b": "True if at least one of the expressions being evaluated is True",
                "c": "True if neither of the expressions being evaluated is True",
                "d": "False if both expressions being evaluated are True"
              }
            ],
            "correct_answer": "a"
          },
          {
            "question": "What is the output of the following code snippet?\na = 5\nb = 10\nc = 15\nif a < b and b < c:\n    print(\"Both conditions are true.\")\nelse:\n    print(\"At least one condition is false.\")",
            "answer_choices": [
              {
                "a": "Both conditions are true.",
                "b": "At least one condition is false.",
                "c": "Both conditions are false.",
                "d": "The code snippet will produce an error."
              }
            ],
            "correct_answer": "a"
          }
        ],
        "module_comments": []
      },
      {
        "module_title": "Functions and Modules",
        "slides": [
          {
            "slide_title": "Introduction to Functions",
            "description": "The concept of functions is one of the fundamental building blocks of programming in Python.\nFunctions are reusable blocks of code that perform a specific task, and they allow us to break up our programs into smaller, more manageable pieces.\nIn this module, we'll introduce you to the basics of functions in Python.\nYou'll learn how to define your own functions and call them from other parts of your code.\nWe'll also cover how to use parameters and return values in your functions, and how to handle errors that might occur during their execution.\nBy the end of this module, you'll have a solid understanding of how functions work in Python and why they're so important in programming."
          },
          {
            "slide_title": "Creating and Calling Functions",
            "description": "A function is defined using the \"def\" keyword, followed by the function name and parentheses.\nInside the parentheses, you can define parameters for the function to take as input.\nThe body of the function is indented and contains the code to be executed when the function is called.\nTo call a function, you simply need to write the function name followed by parentheses, and pass any necessary arguments inside the parentheses.\nFunctions can also return values using the \"return\" keyword.\nHere are some examples:\n# Function that prints a welcome message with a name parameter\ndef welcome(name):\n    print(f\"Welcome, {name}!\")\n\n# Function that calculates the sum of two numbers with two parameters\ndef add_numbers(num1, num2):\n    sum = num1 + num2\n    return sum\n\n# Call the welcome function with the name parameter \"Alice\"\nwelcome(\"Alice\") #Output: Welcome, Alice!\n\n# Call the add_numbers function with the parameters 3 and 5, and print the result\nresult = add_numbers(3, 5)\nprint(f\"The sum of 3 and 5 is: {result}\") #Output: The sum of 3 and 5 is: 8"
          },
          {
            "slide_title": "Built-in Python Modules",
            "description": "\nimport datetime\n\ncurrent_time = datetime.datetime.now()\nprint(\"Current date and time: \", current_time) #Output: Current date and time: 2023-25-03 13:45:32.123456\n\nimport random\n\nrandom_number = random.randint(1, 10)\nprint(\"Random number between 1 and 10: \", random_number) #Output: Random number between 1 and 10: 8\n\nimport math\na = 16\nprint(math.sqrt(a))  # Output: 4.0"
          }
        ],
        "quiz": [
          {
            "question": "What is a function in Python?",
            "answer_choices": [
              {
                "a": "A collection of variables",
                "b": "A collection of loops",
                "c": "A collection of code that performs a specific task and can be called from other parts of the program",
                "d": "A collection of conditions"
              }
            ],
            "correct_answer": "c"
          },
          {
            "question": "What is the difference between a function definition and a function call?",
            "answer_choices": [
              {
                "a": "A function definition defines a variable and a function call performs a specific task",
                "b": "A function definition performs a specific task and a function call defines a variable",
                "c": "A function definition is where you write the code for a function and a function call is where you use the function",
                "d": "A function definition and a function call are the same thing"
              }
            ],
            "correct_answer": "c"
          },
          {
            "question": "How do you define a function in Python?",
            "answer_choices": [
              {
                "a": "def function_name():",
                "b": "function_name():",
                "c": "function_name = def():",
                "d": "function_name = ()"
              }
            ],
            "correct_answer": "a"
          },
          {
            "question": "What is the purpose of the 'return' statement in a function?",
            "answer_choices": [
              {
                "a": "To stop the execution of the function",
                "b": "To print a message to the console",
                "c": "To specify the input parameters of the function",
                "d": "To return a value from the function"
              }
            ],
            "correct_answer": "d"
          },
          {
            "question": "Which of the following is NOT a built-in function in Python?",
            "answer_choices": [
              {
                "a": "print()",
                "b": "len()",
                "c": "range()",
                "d": "add()"
              }
            ],
            "correct_answer": "d"
          },
          {
            "question": "What keyword in Python is used to return a value from a function?",
            "answer_choices": [
              {
                "a": "return",
                "b": "output",
                "c": "yield",
                "d": "break"
              }
            ],
            "correct_answer": "a"
          },
          {
            "question": "What is the output of this code?\ndef areaRectangle(a, b):\n    area = a * b\n    return 'The area of this rectangle is {area}'\nprint(areaRectangle(5,10))",
            "answer_choices": [
              {
                "a": "The area of this rectangle is 10",
                "b": "The area of this rectangle is 5",
                "c": "The area of this rectangle is 50",
                "d": "The area of this circle is 4pi"
              }
            ],
            "correct_answer": "c"
          },
          {
            "question": "What is a Python module?",
            "answer_choices": [
              {
                "a": "A function that performs a specific task and can be called from other parts of the program.",
                "b": "A collection of variables.",
                "c": "A collection of code that performs a specific task and can be called from other parts of the program.",
                "d": "A collection of conditions."
              }
            ],
            "correct_answer": "c"
          },
          {
            "question": "What is the difference between a built-in module and a user-defined module?",
            "answer_choices": [
              {
                "a": "A built-in module is included in Python by default, while a user-defined module is created by the programmer.",
                "b": "A built-in module is used for math operations, while a user-defined module is used for string manipulation.",
                "c": "A built-in module is used for string manipulation, while a user-defined module is used for math operations.",
                "d": "There is no difference between a built-in module and a user-defined module."
              }
            ],
            "correct_answer": "a"
          },
          {
            "question": "What is the purpose of the 'import' statement in Python?",
            "answer_choices": [
              {
                "a": "To create a new module.",
                "b": "To call a function.",
                "c": "To load a module into a Python script.",
                "d": "To print a message to the console."
              }
            ],
            "correct_answer": "c"
          }
        ],
        "module_comments": []
      },
      {
        "module_title": "Data Structures - Lists, Tuples,Sets and Dictionaries",
        "slides": [
          {
            "slide_title": "Introduction to Data Structures: What exactly is a data structure",
            "description": "Data structures in Python are the building blocks of programming.\nThey are essential for managing and manipulating data in a way that is both efficient and effective.\nData structures can range from simple to complex, depending on the task at hand.\nIn Python, there are several built-in data structures, such as lists, tuples, sets, and dictionaries, that can be used to store and organize data.\nEach of these structures has its unique characteristics and uses, which we will explore in this class.\nBy the end of this lesson, you should have a solid understanding of data structures and be able to use them in your Python programs to make your code more efficient and effective."
          },
          {
            "slide_title": "Lists",
            "description": "A list is an ordered collection of items, where each item is assigned a unique index number that can be used to access and manipulate the data.\nIn Python, lists are a versatile and widely used data structure, and they can be created using square brackets and separating each item with a comma.\nLists can contain items of different types, including strings, numbers, and even other lists.\nThey are commonly used for storing and manipulating data that can change over time, such as user input or database records.\nWith their flexibility and powerful built-in functions, lists are an essential tool for many programming tasks in Python.\nHere are some examples of their uses\nA class roster:\nstudents = ['Alice', 'Bob', 'Charlie', 'David']\nprint(students[0]) #Output: 'Alice'\nprint(students[3]) #Output: 'David'\n\nFruits(adding and removing elements):\nfruits = ['apple', 'date', 'cherry']\nfruits.append('mango')#adding an element\nprint(fruits)# Output: ['apple', 'date', 'cherry', 'mango']\nfruits.remove('apple')\nprint(fruits)#Output: ['date', 'cherry', 'mango']"
          },
          {
            "slide_title": "Tuples and Sets",
            "description": "On the other hand, a set is an unordered collection of unique objects.\nUnlike lists and tuples, sets do not have a specific order, and duplicate elements are automatically removed.\nSets are useful for tasks such as removing duplicates from a list or testing membership of an element in a collection.\nSets are created by enclosing a comma-separated sequence of objects in curly braces or by using the set() function.\nHere is an example showing the functionality of a tuple:\n\n# creating a tuple of numbers\nmy_tuple = (1, 2, 3, 4, 5)\n\n# accessing elements of a tuple\nprint(my_tuple[0]) # output: 1\nprint(my_tuple[3]) # output: 4\n\n# attempting to modify a tuple (this will result in an error)\nmy_tuple[2] = 10 # TypeError: 'tuple' object does not support item assignment\n\nHere is an example using a set:\n# creating a set of strings\nmy_set = {\"apple\", \"banana\", \"cherry\", \"apple\", \"banana\"}\n\n# printing the set (duplicates are automatically removed)\nprint(my_set) # output: {\"apple\", \"banana\", \"cherry\"}\n\n# adding an item to the set\nmy_set.add(\"orange\")\n\n# removing an item from the set\nmy_set.remove(\"banana\")\n\n# checking if an item exists in the set\nprint(\"orange\" in my_set) # output: True\nprint(\"watermelon\" in my_set) # output: False"
          },
          {
            "slide_title": "Dictionaries",
            "description": "Dictionaries in Python are a type of data structure that allow you to store and access data in an organized and efficient way.\nA dictionary is created by enclosing a comma-separated list of key-value pairs in curly braces {}.\nEach key is separated from its value by a colon, and the key-value pairs are separated by commas.\nDictionaries are unordered, which means that the items in the dictionary are not stored in any particular order, and they are mutable, which means that you can add, remove, or modify items in the dictionary after it has been created.\nAnother word for dictionaries in computer science is Hash Maps, remember that for your coding interviews.\n\nOne case where you might use a dictionary is when assigning a group of people there phone numbers:\n\npeopleNumbers = {\"Alice\":\"123 456 7890\",\"Bob\":\"098 765 4321\"}\nprint(peopleNumbers[\"Alice\"]) # Output: 123 456 7890\nprint(peopleNumbers.get(\"Bob\")) # Output: 098 765 4321\npeopleNumbers[\"Jake\"] = \"981 235 0124\"\nprint(peopleNumbers)#Output: {\"Alice\":\"123 456 7890\",\"Bob\":\"098 765 4321\", \"Jake\":\"981 235 0124\"}"
          }
        ],
        "quiz": [
          {
            "question": "What is a data structure in Python?",
            "answer_choices": [
              {
                "a": "A way of organizing and storing data so that it can be accessed and used efficiently.",
                "b": "A way of organizing and storing data so that it can be accessed and used inefficiently.",
                "c": "A way of organizing and storing data that cannot be accessed or used.",
                "d": "A way of organizing and storing data that only works for certain types of data."
              }
            ],
            "correct_answer": "a"
          },
          {
            "question": "What is a list in Python?",
            "answer_choices": [
              {
                "a": "A type of data that can only hold numeric values",
                "b": "A way to organize and store data",
                "c": "A built-in function in Python",
                "d": "A type of loop"
              }
            ],
            "correct_answer": "b"
          },
          {
            "question": "What is the correct syntax to create a list in Python?",
            "answer_choices": [
              {
                "a": "list = {}",
                "b": "list = []",
                "c": "list = ()",
                "d": "list = <>"
              }
            ],
            "correct_answer": "b"
          },
          {
            "question": "What is the index of the first element in a list?",
            "answer_choices": [
              {
                "a": "0",
                "b": "1",
                "c": "n",
                "d": "None of the above"
              }
            ],
            "correct_answer": "a"
          },
          {
            "question": "What is the output of the following code: \n\nmy_list = [2, 4, 6, 8] \nprint(my_list[1:3])",
            "answer_choices": [
              {
                "a": "[2, 4]",
                "b": "[4, 6]",
                "c": "[6, 8]",
                "d": "[2, 4, 6]"
              }
            ],
            "correct_answer": "b"
          },
          {
            "question": "What is a tuple in Python?",
            "answer_choices": [
              {
                "a": "A way of organizing and storing data",
                "b": "A data structure that can only hold numeric values",
                "c": "A loop in Python",
                "d": "A built-in function in Python"
              }
            ],
            "correct_answer": "a"
          },
          {
            "question": "What is a set in Python?",
            "answer_choices": [
              {
                "a": "A way of organizing and storing data",
                "b": "A data structure that can only hold numeric values",
                "c": "A loop in Python",
                "d": "A built-in function in Python"
              }
            ],
            "correct_answer": "a"
          },
          {
            "question": "What is the main difference between a tuple and a set in Python?",
            "answer_choices": [
              {
                "a": "A tuple is ordered and immutable, while a set is unordered and mutable",
                "b": "A tuple can hold any type of data, while a set can only hold numeric values",
                "c": "A tuple is mutable, while a set is immutable",
                "d": "There is no difference between a tuple and a set"
              }
            ],
            "correct_answer": "a"
          },
          {
            "question": "What is the output of the following code: \nmy_tuple = (1, 2, 3) \nprint(my_tuple)",
            "answer_choices": [
              {
                "a": "(1, 2, 3)",
                "b": "[1, 2, 3]",
                "c": "{1, 2, 3}",
                "d": "1, 2, 3"
              }
            ],
            "correct_answer": "a"
          },
          {
            "question": "What is a dictionary in Python?",
            "answer_choices": [
              {
                "a": "A way of organizing data with key-value pairs",
                "b": "A type of loop in Python",
                "c": "A way of storing numerical data",
                "d": "A way of creating strings in Python"
              }
            ],
            "correct_answer": "a"
          },
          {
            "question": "Which of the following is the correct way to add a key-value pair to a dictionary in Python?",
            "answer_choices": [
              {
                "a": "my_dict[key] = value",
                "b": "my_dict.add(key, value)",
                "c": "my_dict.update(key, value)",
                "d": "my_dict.append(key, value)"
              }
            ],
            "correct_answer": "a"
          }
        ],
        "module_comments": []
      }
    ],
    "students": [
      {
        "id": "e58ed763-928c-4155-bee9-fdbaaadc15f3",
        "completed": true,
        "grades": [
          95.0,
          94.0,
          97.0
        ]
      }
    ],
    "course_comments": [
      {
        "id": "e58ed763-928c-4155-bee9-fdbaaadc15f3",
        "text": "This is a course comment",
        "replies": [
          {
            "id": "e58ed763-928c-4155-bee9-fdbaaadc15f3",
            "text": "This is a reply to a course comment",
            "more_replies": [
              {
                "id": "e58ed763-928c-4155-bee9-fdbaaadc15f3",
                "text": "This is a reply to reply to a comment"
              }
            ]
          }
        ]
      }
    ],
    "exam": [
      {
        "question": "question1",
        "answer_choices": [
          {
            "a": "exam answer choice 1",
            "b": "exam answer choice 2",
            "c": "exam answer choice 3",
            "d": "exam answer choice 4"
          }
        ],
        "correct_answer": "a"
      }
    ]
  }, {
    "title": "Introduction to JavaScript",
    "difficulty": "BEGINNER",
    "author": "Little Baby",
    "teacher_id": "6ee074ab-189e-4508-9574-972f77fb2812",
    "course_id": "a5a5e5c5-e5f5-8a3b-29cb-a65a2d578fa5",
    "courseType": "JAVASCRIPT",
    "modules": [
      {
        "module_title": "Course Introduction",
        "slides": [
          {
            "slide_title": "Course Introduction and Welcome",
            "description": "Welcome to Introduction to JavaScript course!\n\nIn this course, we will learn the fundamentals of JavaScript programming language and how to use it to create dynamic and interactive web pages.\n\nThroughout the course, we will cover topics such as variables, data types, operators, control structures, functions, arrays, objects, and working with the Document Object Model (DOM).\n\nWe will also explore more advanced topics such as asynchronous programming, error handling, and working with third-party libraries and frameworks.\n\nBy the end of the course, you will have a solid understanding of JavaScript programming language and the skills to create dynamic and interactive web pages.\n"
          },
          {
            "slide_title": "Course Objectives and Outcomes",
            "description": "In this section, we will discuss the objectives and outcomes of the course.\n\nBy the end of this course, you will be able to write JavaScript programs to create dynamic and interactive web pages.\n\nYou will have a good understanding of the JavaScript programming language and be familiar with its syntax, data structures, control structures, functions, and object-oriented programming concepts.\n\nYou will also be able to work with the Document Object Model (DOM), handle events, and manipulate web page content using JavaScript.\n\nOverall, this course aims to equip you with the fundamental skills and knowledge required to start your journey as a JavaScript developer.\n"
          },
          {
            "slide_title": "Course Outline",
            "description": "1. Course Overview\n2. Introduction to JavaScript\n3. Variables and Data Types\n4. Control Flow and Loops\n5. Functions and Modules\n6. Arrays and Objects\n7. Working with the Document Object Model (DOM)\n8. Asynchronous Programming and Error Handling\n9. Working with Third-Party Libraries and Frameworks"
          }
        ],
        "quiz": [],
        "module_comments": []
      },
      {
        "module_title": "Getting Started with JavaScript",
        "slides": [
          {
            "slide_title": "Introduction to JavaScript",
            "description": "JavaScript is a high-level programming language that is widely used to create interactive and dynamic web pages. It is a versatile language that can be used for front-end development, back-end development, and even mobile app development.\nJavaScript was first released in 1995 and has since become one of the most popular programming languages in the world.\nIn this course, we will learn the basics of JavaScript programming and how to use it to create web applications."
          },
          {
            "slide_title": "Setting up your JavaScript Workspace",
            "description": "Setting up your workspace for JavaScript programming will require a few steps:\nFirst, you need to have a code editor installed on your computer, such as Visual Studio Code, Sublime Text, or Atom. These editors provide a more user-friendly interface for coding.\nNext, you need to have a web browser installed on your computer, such as Google Chrome, Firefox, or Safari. This will be used to test and run your JavaScript code.\nYou can write JavaScript code directly in an HTML file or create a separate JavaScript file and link it to your HTML file using a script tag.\nLastly, you can also use online code editors like CodePen or JSFiddle to write and test your JavaScript code without the need for any installation."
          }
        ],
        "quiz": [
          {
            "question": "What is JavaScript?",
            "answer_choices": [
              {
                "a": "A markup language",
                "b": "A low-level programming language",
                "c": "A compiled programming language",
                "d": "A high-level, interpreted programming language"
            }
            ],
            "correct_answer": "d"
          },
          {
            "question": "Who created JavaScript?",
            "answer_choices": [
              {
                "a": "Bill Gates",
                "b": "Brendan Eich",
                "c": "Guido Von Rossum",
                "d": "Steve Jobs"
              }
            ],
            "correct_answer": "b"
          },
          {
            "question": "What are the two types of data types in JavaScript?",
            "answer_choices": [
              {
                "a": "Numbers and strings",
                "b": "Booleans and arrays",
                "c": "Objects and arrays",
                "d": "Numbers and objects"
              }
            ],
            "correct_answer": "c"
          },
          {
            "question": "Which of the following is not a looping structure in JavaScript?",
            "answer_choices": [
              {
                "a": "while loop",
                "b": "for loop",
                "c": "do-while loop",
                "d": "goto loop"
              }
            ],
            "correct_answer": "d"
          }
          ],
          "module_comments": []
        },
        {
          "module_title": "Variables and Data Types",
          "slides": [
            {
              "slide_title": "Working with Variables",
              "description": "Variable names must start with a letter or underscore, and can be followed by letters, digits, or underscores.\n Variable names are case-sensitive, so 'my_var' and 'My_Var' are two different variables.\n Declaring Variables Using the Assignment Operator '='\n To declare a variable in Python, simply assign a value to it using the '=' operator.\n For example, to declare a variable 'x' with a value of 10, we would write 'x = 10'.\n Understanding Data Types in Python:\n Python supports several data types, including numeric types (integers and floats), strings, and booleans.\n Numeric types represent numbers, strings represent text, and booleans represent true or false values.\n\nExamples of Declaring Variables of Different Data Types\nTo declare a variable of type integer, we can assign an integer value to it, such as 'x = 5'.\nTo declare a variable of type string, we can enclose a string value in quotation marks, such as ' name = 'John' '.\nTo declare a variable of type boolean, we can assign a true/false value to it, such as hasFriends = false or isSad = true\n\n Unlike in java, python is much more flexible with data types, which is why we have to be much more careful about making mistakes and keeping track of what data types are store in each variable of our own accord.\nCommenting your code by typing '#' followed by your comment is an easy way to keep track of what is in what."
            },
            {
              "slide_title": "Another Introduction to Javascript",
              "description": "Javascript has several primitive data types, including numbers, strings, booleans, null, and undefined.\nNumbers can be integers or floating-point numbers.\nBooleans are either true or false and are often used for logical expressions.\nStrings are sequences of characters enclosed in quotes, either single quotes('') or double quotes.\nAdditionally, there are two more advanced primitive data types: arrays and objects, but we will cover these in depth later. \nArrays are ordered collections of items, and objects are unordered collections of key-value pairs.\nThese primitive data types form the building blocks of more complex data structures in Javascript."
            },
            {
              "slide_title": "Type Conversion and Casting",
              "description": "Type conversion, also known as casting, refers to the process of converting one data type to another.\nIn Python, you can convert between primitive data types using built-in functions such as int(), float(), str(), and bool().\nFor example, you can use int() to convert a string containing a number to an integer, or float() to convert an integer or string to a floating-point number.\nSimilarly, you can use str() to convert a number to a string, or bool() to convert a value to either True or False.\nIt's important to note that some conversions may result in a loss of precision or information, so it's always best to use the appropriate conversion function for the desired result.\n\nHere is some sample python code illustrating the capabilities of these functions:\n# Converting a string to an integer:\nage_str = '27'\nage_int = int(age_str)\nprint(age_int)  # Output: 27\n\n# Converting a float to an integer:\nprice_float = 9.99\nprice_int = int(price_float)\nprint(price_int)  # Output: 9\n\n# Converting an integer to a string:\ncount_int = 10\ncount_str = str(count_int)\nprint(count_str)  # Output: \"10\"\n\n# Converting a boolean to an integer:\nis_true = True\nis_false = False\nint_true = int(is_true)\nint_false = int(is_false)\nprint(int_true)   # Output: 1\nprint(int_false)  # Output: 0\n\n# Converting a string to a boolean:\nis_true_str = \"True\"\nis_false_str = \"False\"\nbool_true = bool(is_true_str)\nbool_false = bool(is_false_str)\nprint(bool_true)   # Output: True\nprint(bool_false)  # Output: True (any non-empty string is considered True)"
            }
          ],
          "quiz": [
            {
              "question": "What is the naming convention for JavaScript variables?",
              "answer_choices": [
                {
                  "a": "Start with a digit, followed by letters or underscores",
                  "b": "Start with a letter or underscore, followed by letters, digits or underscores",
                  "c": "Start with an underscore, followed by letters, digits or underscores",
                  "d": "Start with a letter, followed by letters or digits"
                }
              ],
              "correct_answer": "b"
            },
            {
              "question": "What data types are supported in JavaScript?",
              "answer_choices": [
                {
                  "a": "Numeric types (integers and floats), strings, and booleans",
                  "b": "Numeric types (integers and floats) and strings",
                  "c": "Strings and booleans",
                  "d": "Numeric types (integers, floats, and complex numbers), strings, and booleans"
                }
              ],
              "correct_answer": "a"
            },
            {
              "question": "What is the difference between null and undefined in JavaScript?",
              "answer_choices": [
                {
                  "a": "There is no difference, they both represent the absence of a value",
                  "b": "Null represents the absence of a value while undefined represents a variable that has been declared but has not been assigned a value",
                  "c": "Undefined represents the absence of a value while null represents a variable that has been declared but has not been assigned a value",
                  "d": "Null and undefined are the same data type"
                }
              ],
              "correct_answer": "b"
            },
            {
              "question": "What is the difference between the == operator and the === operator in JavaScript?",
              "answer_choices": [
                {
                  "a": "They are the same operator",
                  "b": "== compares the value of two variables without considering the data type, while === compares the value and the data type of two variables",
                  "c": "== compares the value and the data type of two variables, while === compares the value of two variables without considering the data type",
                  "d": "None of the above"
                }
              ],
              "correct_answer": "b"
            },
            {
              "question": "What are arrays and objects in JavaScript?",
              "answer_choices": [
                {
                  "a": "Arrays are unordered collections of key-value pairs, and objects are ordered collections of items",
                  "b": "Arrays are ordered collections of items, and objects are unordered collections of key-value pairs",
                  "c": "Arrays and objects are the same data type",
                  "d": "Arrays and objects are only used in advanced JavaScript programming"
                }
              ],
              "correct_answer": "b"
            },
            {
              "question": "Which built-in function can be used to convert a string to an integer in JavaScript?",
              "answer_choices": [
                {
                  "a": "str()",
                  "b": "parseFloat()",
                  "c": "parseInt()",
                  "d": "Boolean()"
                }
              ],
              "correct_answer": "c"
            },
            {
              "question": "What is the correct syntax to declare a variable in JavaScript?",
              "answer_choices": [
                {
                  "a": "variable_name = value",
                  "b": "value = variable_name",
                  "c": "var variable_name = value",
                  "d": "value == variable_name"
                }
              ],
              "correct_answer": "c"
            }
            ],
            "module_comments": []
        },
        {
          "module_title": "Control Flow and Loops",
          "slides": [
            {
              "slide_title": "Conditional Statements",
              "description": "Conditional statements are used in JavaScript to make decisions based on certain conditions. The most common conditional statement in JavaScript is the if statement, which executes a block of code only if a specific condition is true. In addition to the if statement, JavaScript also has else and else if statements, which are used to create more complex decision-making structures."
            },
            {
              "slide_title": "Loops and Iterations",
              "description": "# Example 1: For loop\nnumbers = [1, 2, 3, 4, 5]\nfor num in numbers:\n    print(num)\n# Output: 1 2 3 4 5\n\nword = \"hello\"\nfor letter in word:\n    print(letter)\n# Output: h e l l o\n\n# Example 2: While loop\ni = 0\nwhile i < 5:\n    print(i)\n    i += 1\n# Output: 0 1 2 3 4\n# Example 3: Range function with for loop\nfor i in range(5):\n    print(i)\n# Output: 0 1 2 3 4\n\n# Example 4: Enumerate function with for loop\nfruits = [\"apple\", \"banana\", \"cherry\"]\nfor i, fruit in enumerate(fruits):\n    print(i, fruit)\n# Output: 0 apple 1 banana 2 cherry\n\n# Example 5: Zip function with for loop\nnames = [\"Alice\", \"Bob\", \"Charlie\"]\nages = [25, 30, 35]\nfor name, age in zip(names, ages):\n    print(name, age)\n# Output: Alice 25 Bob 30 Charlie 35\n\n# Example 6: Break statement in for loop\nnumbers = [1, 2, 3, 4, 5]\nfor num in numbers:\n    if num == 3:\n        break\n    print(num)\n# Output: 1 2\n\n# Example 7: Continue statement in for loop\nnumbers = [1, 2, 3, 4, 5]\nfor num in numbers:\n    if num == 3:\n        continue\n    print(num)\n# Output: 1 2 4 5"
            },
            {
              "slide_title": "Control Flow and Logical Operators",
              "description": "In JavaScript, logical operators are used to evaluate logical expressions and return a boolean value of either true or false. There are three logical operators in JavaScript: && (logical AND), || (logical OR), and ! (logical NOT). The && operator returns true if both expressions being evaluated are true, otherwise it returns false. The || operator returns true if at least one of the expressions being evaluated is true, otherwise it returns false. Finally, the ! operator returns the opposite boolean value of the expression it is evaluating. Logical operators are often used in conditional statements such as if statements and while loops to control program flow based on logical conditions. They can also be used in conjunction with comparison operators to create more complex logical expressions."
            }
          ],
          "quiz": [
            {
              "question": "What is the purpose of JavaScript?",
              "answer_choices": [
                {
                  "a": "To make web pages more visually appealing.",
                  "b": "To make web pages more interactive.",
                  "c": "To make web pages load faster.",
                  "d": "To make web pages more secure."
                }
              ],
              "correct_answer": "b"
            },
            {
              "question": "What is the correct syntax for declaring a variable in JavaScript?",
              "answer_choices": [
                {
                  "a": "var = myVariable;",
                  "b": "variable myVariable;",
                  "c": "myVariable = var;",
                  "d": "var myVariable;"
                }
              ],
            " correct_answer": "d"
            },
            {
              "question": "What is the difference between == and === in JavaScript?",
              "answer_choices": [
                {
                  "a": "== compares both value and type, while === compares only value.",
                  "b": "=== compares both value and type, while == compares only value.",
                  "c": "== and === are equivalent.",
                  "d": "== and === cannot be used in JavaScript."
                }
              ],
              "correct_answer": "b"
            },
            {
              "question": "What is the output of the following code?\nvar myVar = 3;\nmyVar = myVar + 1;\nconsole.log(myVar);",
              "answer_choices": [
                {
                  "a": "1",
                  "b": "2",
                  "c": "3",
                  "d": "4"
                }
              ],
              "correct_answer": "d"
            },
            {
              "question": "Which of the following is NOT a data type in JavaScript?",
              "answer_choices": [
                {
                  "a": "Boolean",
                  "b": "String",
                  "c": "Number",
                  "d": "Character"
                }
              ],
              "correct_answer": "d"
            },
            {
              "question": "What is the purpose of a loop in JavaScript?",
              "answer_choices": [
                {
                  "a": "To define a function.",
                  "b": "To declare a variable.",
                  "c": "To execute a block of code repeatedly.",
                  "d": "To add a style to an element."
                }
              ],
              "correct_answer": "c"
            },
            {
              "question": "What is the difference between the for and while loops in JavaScript?",
              "answer_choices": [
                {
                  "a": "A for loop iterates over a sequence, while a while loop repeatedly executes code as long as a condition is true.",
                  "b": "A for loop and a while loop are the same thing.",
                  "c": "A for loop executes a block of code once, while a while loop repeats the block of code until a condition is false.",
                  "d": "A for loop is used for arithmetic operations, while a while loop is used for logical operations."
                }
              ],
              "correct_answer": "a"
            }
          ],
          "module_comments": []
        },
        {
          "module_title": "",
          "slides": [],
          "quiz": [],
          "module_comments": []
        }
      ],
      "students": [
        {
          "id": "f60f1603-6dfe-49e3-b92f-3f63e9f69b61",
          "completed": true,
          "grades": [
            95.0,
            94.0,
            97.0
          ]
        }
      ],
      "course_comments": [
        {
          "id": "1a5e5d5f-32d7-4492-9a7c-9ee9c331e188",
          "text": "This is a course comment",
          "replies": [
            {
              "id": "e75c7f1a-56f8-4a8b-a7da-c3e9f0b0f18b",
              "text": "This is a reply to a course comment",
              "more_replies": [
                {
                  "id": "7f1d4855-f99f-4212-8a7c-0e9d556e7c91",
                  "text": "This is a reply to reply to a comment"
                }
              ]
            }
          ]
        }
      ],
      "exam": [
        {
          "question": "question1",
          "answer_choices": [
            {
              "a": "exam answer choice 1",
              "b": "exam answer choice 2",
              "c": "exam answer choice 3",
              "d": "exam answer choice 4"
            }
          ],
          "correct_answer": "a"
        }
      ]
  }
]