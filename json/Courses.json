[
  {
    "difficulty": "BEGINNER",
    "exam": [
      {
        "answer_choices": [
          {
            "a": "exam answer choice 1",
            "b": "exam answer choice 2",
            "c": "exam answer choice 3",
            "d": "exam answer choice 4"
          }
        ],
        "question": "question1",
        "correct_answer": "a"
      }
    ],
    "course_id": "e58ed763-928c-4155-bee9-fdbaaadc15f4",
    "courseType": "PYTHON",
    "author": "Mr. Cole",
    "teacher_id": "eff4390c-47db-428a-9178-66bf7ed2e7c1",
    "students": [
      {
        "id": "e58ed763-928c-4155-bee9-fdbaaadc15f3",
        "completed": false,
        "grades": [95.0, 94.0, 97.0]
      }
    ],
    "title": "Introduction to Python",
    "course_comments": [
      {
        "replies": [
          {
            "replies": [
              {
                "replies": null,
                "id": "e58ed763-928c-4155-bee9-fdbaaadc15f3",
                "text": "This is a reply to reply to a comment"
              }
            ],
            "id": "e58ed763-928c-4155-bee9-fdbaaadc15f3",
            "text": "This is a reply to a course comment"
          }
        ],
        "id": "e58ed763-928c-4155-bee9-fdbaaadc15f3",
        "text": "This is a course comment"
      }
    ],
    "modules": [
      {
        "module_comments": [],
        "quiz": [],
        "slides": [
          {
            "description": "Welcome to Introduction to Python course!\n\nIn this course, we will learn the\nbasics\nof\nPython programming language and how to use it to solve various problems.\n\nThroughout\nthe\ncourse,\nwe will cover topics such as data types, variables, operators, control structures,\nfunctions,\nfile\ninput/output, object-oriented programming, and working with libraries and\nmodules.\n\nWe\nwill\nalso explore more advanced topics such as working with APIs, web scraping,\nand automation.\n\nBy\nthe\nend of the course, you will have a solid understanding of Python\nprogramming language\nand\nthe skills to apply it to real-world projects.\n",
            "slide_title": "Course Introduction and Welcome"
          },
          {
            "description": "In this section, we will discuss the objectives and outcomes of the course.\n\nBy\nthe\nend\nof this course, you will be able to write Python programs to solve various real-world\nproblems.\n\nYou\nwill\nhave a good understanding of the Python programming language and be\nfamiliar with\nits syntax,\ndata structures, control structures, functions, and object-oriented\nprogramming\nconcepts.\n\nYou\nwill also be able to work with files, APIs, web scraping, and\nautomation\nusing Python.\n\nOverall,\nthis course aims to equip you with the fundamental skills\nand knowledge\nrequired to start\nyour journey as a Python programmer.\n",
            "slide_title": "Course Objectives and Outcomes"
          },
          {
            "description": "1. Course Overview\n2. Getting Started with Python\n3. Variables and Data Types\n4.\nControl\nFlow\nand Loops\n5. Functions and Modules\n6. Lists, Tuples, and Dictionaries\n7. File\nHandling\nand\nInput/Output\n8. Object-Oriented Programming (OOP)\n9. Advanced Topics in Python",
            "slide_title": "Course Outline"
          }
        ],
        "module_title": "Course Introduction"
      },
      {
        "module_comments": [],
        "quiz": [
          {
            "answer_choices": [
              {
                "a": "A markup language",
                "b": "A low-level programming language",
                "c": "A compiled programming language",
                "d": "A high-level, general interpreted programming language"
              }
            ],
            "question": "What is Python?",
            "correct_answer": "d"
          },
          {
            "answer_choices": [
              {
                "a": "Bill Gates",
                "b": "Linus Torvalds",
                "c": "Guido Von Rossum",
                "d": "Steve Jobs"
              }
            ],
            "question": "Who originally created Python?",
            "correct_answer": "c"
          },
          {
            "answer_choices": [
              {
                "a": "Jupyter Notebook",
                "b": "Visual Studio Code",
                "c": "PyCharm",
                "d": "Eclipse"
              }
            ],
            "question": "What is the primary mode of coding in Python for this module?",
            "correct_answer": "a"
          },
          {
            "answer_choices": [
              {
                "a": "Procedural programming, object-oriented programming, and functional programming",
                "b": "Imperative programming only",
                "c": "Declarative programming only",
                "d": "Object-oriented programming only"
              }
            ],
            "question": "What are some programming paradigms supported by Python?",
            "correct_answer": "a"
          }
        ],
        "slides": [
          {
            "description": "Python is what is considered to be a high-level, general interpreted programming\nlanguage\nthat\nis dynamically typed and supports a variety of programming paradigms such\nas procedural\nprogramming,\nobject-oriented programming and functional programming.\nOriginally\nreleased\nin 1991 by\nGuido van Rossum and is considered to be the most popular programming\nlanguage\nused today\nand one of the easiest to teach individuals.",
            "slide_title": "Another Introduction to Python"
          },
          {
            "description": "Setting up your workspace will require a few steps:\n First download/setup the\nanaconda\ninstaller\nfollowing this link: https://www.anaconda.com/products/distribution\nMake\nsure\nthat you\nhave the bin in your global computer file path.\nMake sure you have Jupyter\nNotebook\ninstalled,\nand you will be able to open jupyter-notebook by typing 'jupyter-notebook'\nin\nyour command\nterminal(cmd or terminal).\n Jupyter will be our primary mode of coding\nin\npython, so it\nis imperative that you install it properly and ask me if you have any\nquestions\nhttps://jupyter-notebook-beginner-guide.readthedocs.io/en/latest/execute.html#:~:text=1.,will%20contain%20all%20the%20notebooks.\n",
            "slide_title": "Setting up your Python Workspace"
          }
        ],
        "module_title": "Getting Started with Python"
      },
      {
        "module_comments": [],
        "quiz": [
          {
            "answer_choices": [
              {
                "a": "Start with a digit, followed by letters or underscores",
                "b": "Start with a letter or underscore, followed by letters, digits or underscores",
                "c": "Start with an underscore, followed by letters, digits or underscores",
                "d": "Start with a letter, followed by letters or digits"
              }
            ],
            "question": "What is the naming convention for Python variables?",
            "correct_answer": "b"
          },
          {
            "answer_choices": [
              {
                "a": "Numeric types (integers and floats), strings, and booleans",
                "b": "Numeric types (integers and floats) and strings",
                "c": "Strings and booleans",
                "d": "Numeric types (integers, floats, and complex numbers), strings, and booleans"
              }
            ],
            "question": "What data types are supported in Python?",
            "correct_answer": "a"
          },
          {
            "answer_choices": [
              {
                "a": "Integers are whole numbers without a decimal point, while floats are numbers with a decimal point",
                "b": "Integers are numbers with a decimal point, while floats are whole numbers without a decimal point",
                "c": "Integers and floats are the same data type",
                "d": "Integers and floats are only used in advanced Python programming"
              }
            ],
            "question": "What is the difference between integers and floats?",
            "correct_answer": "a"
          },
          {
            "answer_choices": [
              {
                "a": "Lists are unordered collections of key-value pairs, and dictionaries are ordered collections of items",
                "b": "Lists are ordered collections of items, and dictionaries are unordered collections of key-value pairs",
                "c": "Lists and dictionaries are the same data type",
                "d": "Lists and dictionaries are only used in advanced Python programming"
              }
            ],
            "question": "What are lists and dictionaries in Python?",
            "correct_answer": "b"
          },
          {
            "answer_choices": [
              {
                "a": "It refers to the process of converting one data type to another",
                "b": "It refers to the process of converting a string to an integer",
                "c": "It refers to the process of converting a boolean to a string",
                "d": "It refers to the process of converting an integer to a boolean"
              }
            ],
            "question": "What is type conversion in Python?",
            "correct_answer": "a"
          },
          {
            "answer_choices": [
              { "a": "str()", "b": "float()", "c": "int()", "d": "bool()" }
            ],
            "question": "Which built-in function can be used to convert a string to an integer?",
            "correct_answer": "c"
          },
          {
            "answer_choices": [
              {
                "a": "variable_name = value",
                "b": "value = variable_name",
                "c": "variable_name == value",
                "d": "value == variable_name"
              }
            ],
            "question": "What is the correct syntax to declare a variable in Python?",
            "correct_answer": "a"
          }
        ],
        "slides": [
          {
            "description": "Variable names must start with a letter or underscore, and can be followed\nby\nletters,\ndigits, or underscores.\n Variable names are case-sensitive, so 'my_var' and\n'My_Var'\nare\ntwo different variables.\n Declaring Variables Using the Assignment Operator\n'='\n To\ndeclare\na variable in Python, simply assign a value to it using the '=' operator.\n\nFor\nexample,\nto declare a variable 'x' with a value of 10, we would write 'x = 10'.\n Understanding\nData\nTypes\nin Python:\n Python supports several data types, including numeric types (integers\nand\nfloats),\nstrings, and booleans.\n Numeric types represent numbers, strings represent\ntext,\nand booleans\nrepresent true or false values.\n\nExamples of Declaring Variables of\nDifferent\nData Types\nTo\ndeclare a variable of type integer, we can assign an integer value\nto it,\nsuch as 'x =\n5'.\nTo declare a variable of type string, we can enclose a string value\nin\nquotation marks,\nsuch as ' name = 'John' '.\nTo declare a variable of type boolean, we\ncan\nassign a true/false\nvalue to it, such as hasFriends = false or isSad = true\n\n Unlike\nin\njava, python is much\nmore flexible with data types, which is why we have to be much\nmore\ncareful about making\nmistakes and keeping track of what data types are store in each\nvariable\nof our own accord.\nCommenting\nyour code by typing '#' followed by your comment\nis an easy\nway to keep track of what is\nin what.",
            "slide_title": "Working with Variables"
          },
          {
            "description": "Python has several primitive data types, including integers, floats, booleans,\nand\nstrings.\nIntegers\nare whole numbers without a decimal point, while floats are numbers\nwith\na decimal point.\nBooleans\nare either True or False and are often used for logical\nexpressions.\nStrings\nare sequences\nof characters enclosed in quotes, either single quotes('')\nor double quotes\n(\"\").\nAdditionally,\nthere are two more advanced primitive data types:\nlists and dictionaries,\nbut we will cover\nthese in depth later. \nLists are ordered collections\nof items, and dictionaries\nare unordered\ncollections of key-value pairs.\nThese primitive\ndata types form the building\nblocks of\nmore complex data structures in Python.",
            "slide_title": "Another Introduction to Python"
          },
          {
            "description": "Type conversion, also known as casting, refers to the process of converting\none\ndata\ntype to another.\nIn Python, you can convert between primitive data types using\nbuilt-in\nfunctions\nsuch as int(), float(), str(), and bool().\nFor example, you can use\nint() to\nconvert a\nstring containing a number to an integer, or float() to convert an integer\nor\nstring to\na floating-point number.\nSimilarly, you can use str() to convert a number\nto\na string,\nor bool() to convert a value to either True or False.\nIt's important to note\nthat\nsome\nconversions may result in a loss of precision or information, so it's always\nbest\nto use\nthe appropriate conversion function for the desired result.\n\nHere is some sample\npython\ncode\nillustrating the capabilities of these functions:\n# Converting a string to\nan integer:\nage_str\n=\n'27'\nage_int = int(age_str)\nprint(age_int)  # Output: 27\n\n# Converting\na float to an\ninteger:\nprice_float\n= 9.99\nprice_int = int(price_float)\nprint(price_int)\n # Output: 9\n\n#\nConverting an integer\nto a string:\ncount_int = 10\ncount_str = str(count_int)\nprint(count_str)\n\n# Output: \"10\"\n\n#\nConverting a boolean to an integer:\nis_true = True\nis_false = False\nint_true\n=\nint(is_true)\nint_false\n= int(is_false)\nprint(int_true)   # Output: 1\nprint(int_false)\n\n# Output: 0\n\n# Converting\na string to a boolean:\nis_true_str = \"True\"\nis_false_str = \"False\"\nbool_true\n=\nbool(is_true_str)\nbool_false\n= bool(is_false_str)\nprint(bool_true)   # Output: True\nprint(bool_false)\n\n# Output: True\n(any non-empty string is considered True)",
            "slide_title": "Type Conversion and Casting"
          }
        ],
        "module_title": "Variables and Data Types"
      },
      {
        "module_comments": [],
        "quiz": [
          {
            "answer_choices": [
              { "a": "for", "b": "while", "c": "if", "d": "break" }
            ],
            "question": "What is the most common conditional statement in Python?",
            "correct_answer": "c"
          },
          {
            "answer_choices": [
              {
                "a": "It is used to create more complex decision-making structures.",
                "b": "It is used to execute a block of code if a specific condition is true.",
                "c": "It is used to execute a block of code if a specific condition is false.",
                "d": "It is used to loop through a sequence of code."
              }
            ],
            "question": "What is the purpose of the \"else\" statement in Python?",
            "correct_answer": "c"
          },
          {
            "answer_choices": [
              { "a": "if-else", "b": "if-elif-else", "c": "while", "d": "for" }
            ],
            "question": "Which of the following is an example of an if statement in Python?",
            "correct_answer": "a"
          },
          {
            "answer_choices": [
              {
                "a": "x is less than 5",
                "b": "x is greater than or equal to 5",
                "c": "x is equal to 5",
                "d": "There is a syntax error in the code."
              }
            ],
            "question": "What is the output of the following code?\nx = 3\nif x < 5:\n    print(\"x is less than 5\")\nelse:\n    print(\"x is greater than or equal to 5\")",
            "correct_answer": "a"
          },
          {
            "answer_choices": [
              {
                "a": "A for loop iterates over a sequence, while a while loop repeatedly executes code as long as a condition is true.",
                "b": "A for loop and a while loop are the same thing.",
                "c": "A for loop executes a block of code once, while a while loop repeats the block of code until a condition is false.",
                "d": "A for loop is used for arithmetic operations, while a while loop is used for logical operations."
              }
            ],
            "question": "What is the difference between a for loop and a while loop in Python?",
            "correct_answer": "a"
          },
          {
            "answer_choices": [
              {
                "a": "4 8 12 16",
                "b": "2 4 6 8",
                "c": "8 16 24 32",
                "d": "10 12 14 16"
              }
            ],
            "question": "What is the output of the following code?\n\nnumbers = [2, 4, 6, 8]\nfor i in numbers:\n    print(i * 2)",
            "correct_answer": "c"
          },
          {
            "answer_choices": [
              {
                "a": "To terminate the loop and skip any remaining iterations",
                "b": "To pause the loop and wait for user input",
                "c": "To execute a block of code once before the loop begins",
                "d": "To skip a single iteration of the loop and continue with the next one"
              }
            ],
            "question": "What is the purpose of the break statement in a loop?",
            "correct_answer": "a"
          },
          {
            "answer_choices": [
              { "a": "0 1 2", "b": "1 2 3", "c": "0 2 4", "d": "1 4 7" }
            ],
            "question": "What is the output of the following code?\n\ni = 0\nwhile i < 3:\n    print(i)\n    i += 1",
            "correct_answer": "a"
          },
          {
            "answer_choices": [
              {
                "a": "and, if, while",
                "b": "if, else, not",
                "c": "and, or, not",
                "d": "or, for, while"
              }
            ],
            "question": "What are the three logical operators in Python?",
            "correct_answer": "c"
          },
          {
            "answer_choices": [
              {
                "a": "True if both expressions being evaluated are True",
                "b": "True if at least one of the expressions being evaluated is True",
                "c": "True if neither of the expressions being evaluated is True",
                "d": "False if both expressions being evaluated are True"
              }
            ],
            "question": "What does the \"and\" operator return in Python?",
            "correct_answer": "a"
          },
          {
            "answer_choices": [
              {
                "a": "Both conditions are true.",
                "b": "At least one condition is false.",
                "c": "Both conditions are false.",
                "d": "The code snippet will produce an error."
              }
            ],
            "question": "What is the output of the following code snippet?\na = 5\nb = 10\nc = 15\nif a < b and b < c:\n    print(\"Both conditions are true.\")\nelse:\n    print(\"At least one condition is false.\")",
            "correct_answer": "a"
          }
        ],
        "slides": [
          {
            "description": "In Python, conditional statements are used to make decisions based on certain\nconditions.\nThe\nmost\ncommon conditional statement is the \"if\" statement, which executes\na block of code\nonly\nif a specific condition is true.\nIn addition to the \"if\" statement,\nPython also has\n\"else\"\nand \"elif\" statements, which are used to create more complex decision-making\nstructures.\n\n#\nExample\n1: if statement\nx = 7\nif x > 5:\n    print(\"x is greater than 5\")\n\n#\nExample 2:\nif-else\nstatement\nx = 2\nif x > 5:\n    print(\"x is greater than 5\")\nelse:\n  \n print(\"x is\nless than\nor equal to 5\")\n\n# Example 3: if-elif-else statement\nx = 12\nif x\n< 5:\n    print(\"x\nis less\nthan 5\")\nelif x > 10:\n    print(\"x is greater than 10\")\nelse:\n\n   print(\"x is between\n5\nand 10\")\n\nThe following code outputs:\nx is greater than 5\nx is\nless than or equal to\n5\nx\nis greater than 10",
            "slide_title": "Conditional Statements"
          },
          {
            "description": "# Example 1: For loop\nnumbers = [1, 2, 3, 4, 5]\nfor num in numbers:\n    print(num)\n#\nOutput:\n1\n2 3 4 5\n\nword = \"hello\"\nfor letter in word:\n    print(letter)\n# Output: h e l\nl o\n\n#\nExample\n2: While loop\ni = 0\nwhile i < 5:\n    print(i)\n    i += 1\n# Output: 0 1 2\n3 4\n#\nExample\n3: Range function with for loop\nfor i in range(5):\n    print(i)\n# Output:\n0 1 2\n3 4\n\n#\nExample 4: Enumerate function with for loop\nfruits = [\"apple\", \"banana\", \"cherry\"]\nfor\ni,\nfruit\nin enumerate(fruits):\n    print(i, fruit)\n# Output: 0 apple 1 banana 2 cherry\n\n#\nExample\n5:\nZip function with for loop\nnames = [\"Alice\", \"Bob\", \"Charlie\"]\nages = [25, 30,\n35]\nfor\nname,\nage in zip(names, ages):\n    print(name, age)\n# Output: Alice 25 Bob 30 Charlie\n35\n\n#\nExample\n6: Break statement in for loop\nnumbers = [1, 2, 3, 4, 5]\nfor num in numbers:\n\n\n  if num\n== 3:\n        break\n    print(num)\n# Output: 1 2\n\n# Example 7: Continue statement\nin\nfor\nloop\nnumbers = [1, 2, 3, 4, 5]\nfor num in numbers:\n    if num == 3:\n        continue\n\n\n\n print(num)\n# Output: 1 2 4 5",
            "slide_title": "Loops and Iterations"
          },
          {
            "description": "In Python, logical operators are used to evaluate logical expressions and return\na\nboolean\nvalue of either True or False.\nThere are three logical operators in Python: \"and\",\n\"or\",\nand\n\"not\".\nThe \"and\" operator returns True if both expressions being evaluated are\nTrue,\notherwise\nit returns False.\nThe \"or\" operator returns True if at least one of the\nexpressions\nbeing\nevaluated is True, otherwise it returns False.\nFinally, the \"not\" operator\nreturns\nthe\nopposite boolean value of the expression it is evaluating.\nLogical operators\nare often\nused\nin conditional statements such as \"if\" statements and \"while\" loops to control\nprogram\nflow\nbased on logical conditions.\nThey can also be used in conjunction with comparison\noperators\nto\ncreate more complex logical expressions.\nOverall, logical operators are an\nessential\ntool\nfor writing programs that can make decisions based on logical conditions.Here\nare\nsome\nexamples:\na = 5\nb = 10\nc = 15\n\n# using AND operator\nif a < b and b < c:\n    print(\"Both\nconditions\nare\ntrue.\")\n# output: Both conditions are true.\n\n# using OR operator\nif a <\nb or a > c:\n\n \n print(\"At least one condition is true.\")\n# output: At least one condition\nis true.\n\n#\nusing\nNOT operator\nif not(a > b):\n    print(\"a is not greater than b.\")\n# output:\na is\nnot greater\nthan b.",
            "slide_title": "Control Flow and Logical Operators"
          }
        ],
        "module_title": "Control Flow and Loops"
      },
      {
        "module_comments": [],
        "quiz": [
          {
            "answer_choices": [
              {
                "a": "A collection of variables",
                "b": "A collection of loops",
                "c": "A collection of code that performs a specific task and can be called from other parts of the program",
                "d": "A collection of conditions"
              }
            ],
            "question": "What is a function in Python?",
            "correct_answer": "c"
          },
          {
            "answer_choices": [
              {
                "a": "A function definition defines a variable and a function call performs a specific task",
                "b": "A function definition performs a specific task and a function call defines a variable",
                "c": "A function definition is where you write the code for a function and a function call is where you use the function",
                "d": "A function definition and a function call are the same thing"
              }
            ],
            "question": "What is the difference between a function definition and a function call?",
            "correct_answer": "c"
          },
          {
            "answer_choices": [
              {
                "a": "def function_name():",
                "b": "function_name():",
                "c": "function_name = def():",
                "d": "function_name = ()"
              }
            ],
            "question": "How do you define a function in Python?",
            "correct_answer": "a"
          },
          {
            "answer_choices": [
              {
                "a": "To stop the execution of the function",
                "b": "To print a message to the console",
                "c": "To specify the input parameters of the function",
                "d": "To return a value from the function"
              }
            ],
            "question": "What is the purpose of the 'return' statement in a function?",
            "correct_answer": "d"
          },
          {
            "answer_choices": [
              { "a": "print()", "b": "len()", "c": "range()", "d": "add()" }
            ],
            "question": "Which of the following is NOT a built-in function in Python?",
            "correct_answer": "d"
          },
          {
            "answer_choices": [
              { "a": "return", "b": "output", "c": "yield", "d": "break" }
            ],
            "question": "What keyword in Python is used to return a value from a function?",
            "correct_answer": "a"
          },
          {
            "answer_choices": [
              {
                "a": "The area of this rectangle is 10",
                "b": "The area of this rectangle is 5",
                "c": "The area of this rectangle is 50",
                "d": "The area of this circle is 4pi"
              }
            ],
            "question": "What is the output of this code?\ndef areaRectangle(a, b):\n    area = a * b\n    return 'The area of this rectangle is {area}'\nprint(areaRectangle(5,10))",
            "correct_answer": "c"
          },
          {
            "answer_choices": [
              {
                "a": "A function that performs a specific task and can be called from other parts of the program.",
                "b": "A collection of variables.",
                "c": "A collection of code that performs a specific task and can be called from other parts of the program.",
                "d": "A collection of conditions."
              }
            ],
            "question": "What is a Python module?",
            "correct_answer": "c"
          },
          {
            "answer_choices": [
              {
                "a": "A built-in module is included in Python by default, while a user-defined module is created by the programmer.",
                "b": "A built-in module is used for math operations, while a user-defined module is used for string manipulation.",
                "c": "A built-in module is used for string manipulation, while a user-defined module is used for math operations.",
                "d": "There is no difference between a built-in module and a user-defined module."
              }
            ],
            "question": "What is the difference between a built-in module and a user-defined module?",
            "correct_answer": "a"
          },
          {
            "answer_choices": [
              {
                "a": "To create a new module.",
                "b": "To call a function.",
                "c": "To load a module into a Python script.",
                "d": "To print a message to the console."
              }
            ],
            "question": "What is the purpose of the 'import' statement in Python?",
            "correct_answer": "c"
          }
        ],
        "slides": [
          {
            "description": "The concept of functions is one of the fundamental building blocks of programming\nin\nPython.\nFunctions\nare reusable blocks of code that perform a specific task, and they\nallow\nus to break up\nour programs into smaller, more manageable pieces.\nIn this module,\nwe'll\nintroduce you\nto the basics of functions in Python.\nYou'll learn how to define your\nown\nfunctions and\ncall them from other parts of your code.\nWe'll also cover how to use\nparameters\nand return\nvalues in your functions, and how to handle errors that might occur\nduring their\nexecution.\nBy\nthe end of this module, you'll have a solid understanding of\nhow functions\nwork in Python\nand why they're so important in programming.",
            "slide_title": "Introduction to Functions"
          },
          {
            "description": "A function is defined using the \"def\" keyword, followed by the function name\nand\nparentheses.\nInside\nthe parentheses, you can define parameters for the function to\ntake\nas input.\nThe body\nof the function is indented and contains the code to be executed\nwhen\nthe function is called.\nTo\ncall a function, you simply need to write the function\nname\nfollowed by parentheses, and\npass any necessary arguments inside the parentheses.\nFunctions\ncan\nalso return values using\nthe \"return\" keyword.\nHere are some examples:\n# Function that\nprints\na welcome message\nwith a name parameter\ndef welcome(name):\n    print(f\"Welcome,\n{name}!\")\n\n#\nFunction that\ncalculates the sum of two numbers with two parameters\ndef add_numbers(num1,\nnum2):\n\n  \nsum = num1 + num2\n    return sum\n\n# Call the welcome function with the name\nparameter\n\"Alice\"\nwelcome(\"Alice\")\n#Output: Welcome, Alice!\n\n# Call the add_numbers function\nwith\nthe parameters 3 and 5,\nand print the result\nresult = add_numbers(3, 5)\nprint(f\"The\nsum\nof 3 and 5 is: {result}\")\n#Output: The sum of 3 and 5 is: 8",
            "slide_title": "Creating and Calling Functions"
          },
          {
            "description": "\nimport datetime\n\ncurrent_time = datetime.datetime.now()\nprint(\"Current date\nand\ntime:\n\", current_time) #Output: Current date and time: 2023-25-03 13:45:32.123456\n\nimport\nrandom\n\nrandom_number\n=\nrandom.randint(1, 10)\nprint(\"Random number between 1 and 10: \",\nrandom_number) #Output:\nRandom\nnumber between 1 and 10: 8\n\nimport math\na = 16\nprint(math.sqrt(a))\n # Output: 4.0",
            "slide_title": "Built-in Python Modules"
          }
        ],
        "module_title": "Functions and Modules"
      },
      {
        "module_comments": [],
        "quiz": [
          {
            "answer_choices": [
              {
                "a": "A way of organizing and storing data so that it can be accessed and used efficiently.",
                "b": "A way of organizing and storing data so that it can be accessed and used inefficiently.",
                "c": "A way of organizing and storing data that cannot be accessed or used.",
                "d": "A way of organizing and storing data that only works for certain types of data."
              }
            ],
            "question": "What is a data structure in Python?",
            "correct_answer": "a"
          },
          {
            "answer_choices": [
              {
                "a": "A type of data that can only hold numeric values",
                "b": "A way to organize and store data",
                "c": "A built-in function in Python",
                "d": "A type of loop"
              }
            ],
            "question": "What is a list in Python?",
            "correct_answer": "b"
          },
          {
            "answer_choices": [
              {
                "a": "list = {}",
                "b": "list = []",
                "c": "list = ()",
                "d": "list = <>"
              }
            ],
            "question": "What is the correct syntax to create a list in Python?",
            "correct_answer": "b"
          },
          {
            "answer_choices": [
              { "a": "0", "b": "1", "c": "n", "d": "None of the above" }
            ],
            "question": "What is the index of the first element in a list?",
            "correct_answer": "a"
          },
          {
            "answer_choices": [
              { "a": "[2, 4]", "b": "[4, 6]", "c": "[6, 8]", "d": "[2, 4, 6]" }
            ],
            "question": "What is the output of the following code: \n\nmy_list = [2, 4, 6, 8] \nprint(my_list[1:3])",
            "correct_answer": "b"
          },
          {
            "answer_choices": [
              {
                "a": "A way of organizing and storing data",
                "b": "A data structure that can only hold numeric values",
                "c": "A loop in Python",
                "d": "A built-in function in Python"
              }
            ],
            "question": "What is a tuple in Python?",
            "correct_answer": "a"
          },
          {
            "answer_choices": [
              {
                "a": "A way of organizing and storing data",
                "b": "A data structure that can only hold numeric values",
                "c": "A loop in Python",
                "d": "A built-in function in Python"
              }
            ],
            "question": "What is a set in Python?",
            "correct_answer": "a"
          },
          {
            "answer_choices": [
              {
                "a": "A tuple is ordered and immutable, while a set is unordered and mutable",
                "b": "A tuple can hold any type of data, while a set can only hold numeric values",
                "c": "A tuple is mutable, while a set is immutable",
                "d": "There is no difference between a tuple and a set"
              }
            ],
            "question": "What is the main difference between a tuple and a set in Python?",
            "correct_answer": "a"
          },
          {
            "answer_choices": [
              {
                "a": "(1, 2, 3)",
                "b": "[1, 2, 3]",
                "c": "{1, 2, 3}",
                "d": "1, 2, 3"
              }
            ],
            "question": "What is the output of the following code: \nmy_tuple = (1, 2, 3) \nprint(my_tuple)",
            "correct_answer": "a"
          },
          {
            "answer_choices": [
              {
                "a": "A way of organizing data with key-value pairs",
                "b": "A type of loop in Python",
                "c": "A way of storing numerical data",
                "d": "A way of creating strings in Python"
              }
            ],
            "question": "What is a dictionary in Python?",
            "correct_answer": "a"
          },
          {
            "answer_choices": [
              {
                "a": "my_dict[key] = value",
                "b": "my_dict.add(key, value)",
                "c": "my_dict.update(key, value)",
                "d": "my_dict.append(key, value)"
              }
            ],
            "question": "Which of the following is the correct way to add a key-value pair to a dictionary in Python?",
            "correct_answer": "a"
          }
        ],
        "slides": [
          {
            "description": "Data structures in Python are the building blocks of programming.\nThey are\nessential\nfor\nmanaging and manipulating data in a way that is both efficient and effective.\nData\nstructures\ncan\nrange from simple to complex, depending on the task at hand.\nIn Python,\nthere are several\nbuilt-in\ndata structures, such as lists, tuples, sets, and dictionaries,\nthat can be used\nto store\nand organize data.\nEach of these structures has its unique characteristics\nand\nuses, which\nwe will explore in this class.\nBy the end of this lesson, you should have\na\nsolid understanding\nof data structures and be able to use them in your Python programs\nto\nmake your code more\nefficient and effective.",
            "slide_title": "Introduction to Data Structures: What exactly is a data structure"
          },
          {
            "description": "A list is an ordered collection of items, where each item is assigned a unique\nindex\nnumber\nthat can be used to access and manipulate the data.\nIn Python, lists are a\nversatile\nand\nwidely used data structure, and they can be created using square brackets\nand separating\neach\nitem with a comma.\nLists can contain items of different types, including\nstrings,\nnumbers,\nand even other lists.\nThey are commonly used for storing and manipulating\ndata\nthat can\nchange over time, such as user input or database records.\nWith their flexibility\nand\npowerful\nbuilt-in functions, lists are an essential tool for many programming tasks\nin\nPython.\nHere\nare some examples of their uses\nA class roster:\nstudents = ['Alice', 'Bob',\n'Charlie',\n'David']\nprint(students[0])\n#Output: 'Alice'\nprint(students[3]) #Output: 'David'\n\nFruits(adding\nand\nremoving elements):\nfruits\n= ['apple', 'date', 'cherry']\nfruits.append('mango')#adding\nan\nelement\nprint(fruits)# Output:\n['apple', 'date', 'cherry', 'mango']\nfruits.remove('apple')\nprint(fruits)#Output:\n['date',\n'cherry',\n'mango']",
            "slide_title": "Lists"
          },
          {
            "description": "On the other hand, a set is an unordered collection of unique objects.\nUnlike\nlists\nand\ntuples, sets do not have a specific order, and duplicate elements are automatically\nremoved.\nSets\nare\nuseful for tasks such as removing duplicates from a list or testing membership\nof an\nelement\nin a collection.\nSets are created by enclosing a comma-separated sequence\nof objects\nin\ncurly braces or by using the set() function.\nHere is an example showing the\nfunctionality\nof\na tuple:\n\n# creating a tuple of numbers\nmy_tuple = (1, 2, 3, 4, 5)\n\n#\naccessing elements\nof\na tuple\nprint(my_tuple[0]) # output: 1\nprint(my_tuple[3]) # output:\n4\n\n# attempting\nto\nmodify a tuple (this will result in an error)\nmy_tuple[2] = 10 # TypeError:\n'tuple'\nobject\ndoes not support item assignment\n\nHere is an example using a set:\n# creating\na set\nof strings\nmy_set\n= {\"apple\", \"banana\", \"cherry\", \"apple\", \"banana\"}\n\n# printing\nthe set\n(duplicates are\nautomatically removed)\nprint(my_set) # output: {\"apple\", \"banana\",\n\"cherry\"}\n\n#\nadding\nan item to the set\nmy_set.add(\"orange\")\n\n# removing an item from the\nset\nmy_set.remove(\"banana\")\n\n#\nchecking\nif an item exists in the set\nprint(\"orange\" in\nmy_set) # output: True\nprint(\"watermelon\"\nin\nmy_set) # output: False",
            "slide_title": "Tuples and Sets"
          },
          {
            "description": "Dictionaries in Python are a type of data structure that allow you to store\nand\naccess\ndata in an organized and efficient way.\nA dictionary is created by enclosing\na comma-separated\nlist\nof key-value pairs in curly braces {}.\nEach key is separated from\nits value by a colon,\nand\nthe key-value pairs are separated by commas.\nDictionaries are\nunordered, which means\nthat\nthe items in the dictionary are not stored in any particular\norder, and they are mutable,\nwhich\nmeans that you can add, remove, or modify items in the\ndictionary after it has been\ncreated.\nAnother\nword for dictionaries in computer science\nis Hash Maps, remember that\nfor your coding interviews.\n\nOne\ncase where you might use a\ndictionary is when assigning\na group of people there phone numbers:\n\npeopleNumbers\n= {\"Alice\":\"123\n456 7890\",\"Bob\":\"098\n765 4321\"}\nprint(peopleNumbers[\"Alice\"]) # Output:\n123 456 7890\nprint(peopleNumbers.get(\"Bob\"))\n#\nOutput: 098 765 4321\npeopleNumbers[\"Jake\"]\n= \"981 235 0124\"\nprint(peopleNumbers)#Output:\n{\"Alice\":\"123\n456 7890\",\"Bob\":\"098 765 4321\",\n\"Jake\":\"981 235 0124\"}",
            "slide_title": "Dictionaries"
          }
        ],
        "module_title": "Data Structures - Lists, Tuples,Sets and Dictionaries"
      },
      {
        "module_comments": [],
        "quiz": [
          {
            "answer_choices": [
              {
                "a": "read()",
                "b": "readlines()",
                "c": "readline()",
                "d": "write()"
              }
            ],
            "question": "Which of the following methods can be used to read a file one line at a time in Python?",
            "correct_answer": "c"
          },
          {
            "answer_choices": [
              {
                "a": "f = open('example.txt'); f.write('Hello, world!'); f.close()",
                "b": "with open('example.txt', 'w') as f: f.write('Hello, world!')",
                "c": "f = open('example.txt', 'r'); f.write('Hello, world!'); f.close()",
                "d": "f.write('Hello World!')"
              }
            ],
            "question": "Which of the following code snippets correctly opens a file called 'example.txt' in write mode, writes the string 'Hello, world!' to the file, and then closes the file?",
            "correct_answer": "b"
          },
          {
            "answer_choices": [
              {
                "a": "input()",
                "b": "print()",
                "c": "raw_input()",
                "d": "keyboard_input()"
              }
            ],
            "question": "What function is used to accept user input from the keyboard in Python?",
            "correct_answer": "a"
          },
          {
            "answer_choices": [
              {
                "a": "To define a block of code that will be executed regardless of whether an exception occurs or not",
                "b": "To catch and handle specific types of exceptions that might occur during program execution",
                "c": "To specify code that should be executed if an exception occurs",
                "d": "To log errors and other information about program execution"
              }
            ],
            "question": "What is the purpose of using a `try` block in Python exception handling?",
            "correct_answer": "b"
          },
          {
            "answer_choices": [
              {
                "a": "`SyntaxError`",
                "b": "`TypeError`",
                "c": "`KeyError`",
                "d": "`ValueError`"
              }
            ],
            "question": "Which of the following is an example of a built-in Python exception?",
            "correct_answer": "d"
          }
        ],
        "slides": [
          {
            "description": "Reading and writing to files is an essential part of many programming tasks,\nand\nPython\nprovides several built-in functions to perform these operations.\nTo read data\nfrom\na file,\nyou first need to open the file using the open() function, specifying the\nfile\nname and\nthe mode in which you want to access the file (such as 'r' for reading or\n'w'\nfor writing).\nOnce\nthe file is open, you can read its contents using the read() function,\nwhich\nreturns the\nentire file's content as a string.\nAlternatively, you can read the file\nline\nby line using\nthe readline() function.\nTo write data to a file, you need to open the\nfile\nin write mode,\nusing the 'w' flag.\nYou can then write data to the file using the write()\nfunction,\nwhich\ntakes a string argument to write to the file.\nFinally, after reading from\nor writing\nto\na file, you should always close the file using the close() function to ensure\nthat any\nchanges\nare properly saved and to free up system resources.\nWe will explore how\nexactly\nto do this\nin the following examples:\n\n# Open a file for writing to it\nwith open('example.txt',\n'w')\nas\nf:\n    # Write some data to the file\n    f.write('Hello, world!\n')\n    f.write('This\nis\nan\nexample file.\n')\n    f.close()\nThe file example.txt now contains the two lines 'Hello\nWorld'\nand\n'This is an example file.'\n# Open a file for reading\nwith open('example.txt',\n'r')\nas f:\n\n   # Read the contents of the file\n    contents = f.read() #Option 1, read\nentire\nfile\nas 1 string\n    contents_list = f.readLines() #Option 2, seperate lines into\nindividual\nstrings\nstored in a list\n    content_one_line = f.readLine() #Option 3, reads\none line\nat a time,\nthe most inefficient way\n\n# Print the contents of the file\nprint(contents)\n#Output,\nsingle\nstring containing everything\nprint(contents_list)#Output: lines comma seperated\nin\na list\nprint(content_one_line)#Output:\nprints out the first line of the file",
            "slide_title": "Reading and Writing Files"
          },
          {
            "description": "User input and output are essential components of any interactive Python program.\nOften\ntimes,\nsoftware\nneeds to be interactive(i.e. apps) and we need a way of handling input\nand output.\nHowever,\nwe\nwill cover it a much smaller scale than apps, so not to worry(Imagine\ncoding an entire\nsoftware\napplication hahaha).\nThe input() function allows a program to\naccept user input\nfrom the\nkeyboard, while the print() function is used to display output\nto the console\nor other\noutput device. As you have noticed, we have using the print() function\nall along!\nThe\ninput()\nfunction waits for the user to type something on the keyboard and\npress Enter,\nand returns\na string containing the user's input.\nThe print() function takes\none or more\narguments\nand displays them on the console or other output device.\nThe format()\nmethod\ncan be used\nto format strings to include variables or other data.\nIt is important\nto properly\nhandle\nuser input to prevent errors or security vulnerabilities, such as by\nvalidating\ninput to\nensure that it meets certain criteria.\nHere's an example that uses\nprint(), input(),\nand\nformat() to ask the user their name, age, and favorite color:\n\n#\nask the user for their\nname,\nage, and favorite color\nname = input(\"What is your name? \")\nage\n= input(\"How old\nare you?\n\")\ncolor = input(\"What is your favorite color? \")\n\n# create a\npersonalized message\nusing\nthe user's input\nmessage = \"Hi {name}, I see that you're {age}\nyears old and your\nfavorite\ncolor is {color}. That's really cool!\"\n\n# display the personalized\nmessage to\nthe user\nprint(message.format(name=name,\nage=age, color=color))\n\nSo if I enter\nVansh, 20,\nand red, the code should output Hi Vansh,\nI see that you're 20 years old and\nyour favorite\ncolor is red. That's really cool!\nThis\nis a very basic chatbot, an interesting\nside project\nwould be to make a madlibs type chatbot.",
            "slide_title": "User Input and Output"
          },
          {
            "description": "\nIn Python, errors that occur during program execution are known as exceptions.\nThese\ncan\narise\ndue to a variety of reasons, such as incorrect input, unexpected data, or system\nfailures.\nTo\nensure\nthat our programs handle these exceptions gracefully, we can use Python's\nbuilt-in\nexception\nhandling mechanism.\nThis involves enclosing the code that might raise\nan exception\nin a\ntry block and using except blocks to catch and handle any specific types\nof exceptions\nthat\nmight occur.\nAdditionally, we can use the finally block to specify code\nthat should\nbe\nexecuted regardless of whether an exception occurred or not.\nBy handling\nexceptions\nin\nthis way, we can prevent our programs from crashing unexpectedly and provide\nhelpful\nerror\nmessages to users.\nWe can also use Python's logging module to log errors\nand other\ninformation\nabout program execution, which can be useful for debugging and monitoring\nprogram\nbehavior.\nKnowing\nhow to handle exceptions is imperative when your code has to\ndeal with\nsituations that\ncan cause a lot of problems (for example, reading or writing\nfrom a file).\nHere's\nan example\nthat tries to take two numbers as user input, and tries\nto divide them:\n2try:\n\n   num1\n= int(input(\"Enter a number: \"))\n    num2 = int(input(\"Enter\nanother number: \"))\n\n   result\n= num1 / num2\n    print(\"The result is:\", result)\nexcept\nValueError:\n    print(\"Invalid\ninput.\nPlease enter a valid integer.\")\nexcept ZeroDivisionError:\n\n   print(\"Cannot divide\nby zero.\")\nfinally:\n\n   print(\"Exiting program.\")",
            "slide_title": "Handling Exceptions and Errors"
          }
        ],
        "module_title": "File Writing/Reading, Input/Output, and Exception Handling"
      },
      {
        "module_comments": [],
        "quiz": [
          {
            "answer_choices": [
              {
                "a": "It is based on the concept of objects.",
                "b": "It is based on the concept of functions.",
                "c": "It is based on the concept of loops.",
                "d": "It is based on the concept of arrays."
              }
            ],
            "question": "What is the basic concept of Object-Oriented Programming (OOP)?",
            "correct_answer": "a"
          },
          {
            "answer_choices": [
              {
                "a": "It allows for more modular, flexible, and reusable code.",
                "b": "It makes programs more complex and harder to maintain.",
                "c": "It reduces the efficiency of code.",
                "d": "It is not compatible with other programming languages."
              }
            ],
            "question": "What are the benefits of using OOP in Python?",
            "correct_answer": "a"
          },
          {
            "answer_choices": [
              {
                "a": "Inheritance, encapsulation, and polymorphism.",
                "b": "Loops, functions, and arrays.",
                "c": "Conditionals, exceptions, and file I/O.",
                "d": "Networking, databases, and GUIs."
              }
            ],
            "question": "What are some of the OOP features provided by Python?",
            "correct_answer": "a"
          },
          {
            "answer_choices": [
              {
                "a": "Use the __init__() method to define the constructor and the class keyword to declare a class.",
                "b": "Use the self keyword to define the constructor and the def keyword to declare a class.",
                "c": "Use the __new__() method to define the constructor and the class keyword to declare a class.",
                "d": "Use the class keyword to define the constructor and the __init__() method to declare a class."
              }
            ],
            "question": "How do you make a constructor and declare a class in Python?",
            "correct_answer": "a"
          },
          {
            "answer_choices": [
              {
                "a": "A mechanism for treating different objects as if they were the same type of object",
                "b": "A mechanism for sharing and reusing properties between related classes",
                "c": "A mechanism for overriding the methods of a parent class",
                "d": "A mechanism for encapsulating data within a class"
              }
            ],
            "question": "What is inheritance in object-oriented programming?",
            "correct_answer": "b"
          },
          {
            "answer_choices": [
              {
                "a": "A mechanism for treating different objects as if they were the same type of object",
                "b": "A mechanism for sharing and reusing properties between related classes",
                "c": "A mechanism for overriding the methods of a parent class",
                "d": "A mechanism for encapsulating data within a class"
              }
            ],
            "question": "What is polymorphism in object-oriented programming?",
            "correct_answer": "a"
          }
        ],
        "slides": [
          {
            "description": "Object-Oriented Programming (OOP) is a programming strategy that is based on\nthe\nconcept\nof objects.\nIn Python, everything data type and structure is an object, making\nOOP\na fundamental\naspect of the language.\nOOP allows programmers to structure their code\nin\na way that is\nmore modular, flexible, and reusable.\nThis is accomplished through the\ncreation\nof classes,\nwhich define the properties and behavior of objects, and the creation\nof instances\nof those\nclasses, which are the actual objects themselves.\nPython provides\na wide range\nof OOP features,\nincluding inheritance, encapsulation, and polymorphism, which\nallow programmers\nto build\ncomplex systems that are easy to maintain and extend.\nWith OOP\nin Python, programmers\ncan\nwrite more organized and efficient code that is also reusable.\nThis\nis arguably why\nOOP\nthe most important a skill a developer/programmer should know and understand.\n\n",
            "slide_title": "Introduction to OOP"
          },
          {
            "description": "Now that we have been introduced to OOP, let's delve deeper. A class lays the\ngroundwork\nfor\ncreating objects, which are instances of the class.\nA class defines a set\nof variables\nand\nmethods that the objects created from it will have .\nMethods are class\nfunctions that\ncan\nbe called on objects to perform some action.\nWhen an object is created\nfrom a class,\nit\nis called an instance of that class.\nEach instance can have its own values\nfor the attributes\ndefined\nin the class.\nLet's explore an example about how classes work\nin python:\n\n#please\ntake\nnote of the indentation(indentation is very important in python)\nclass\nStudent:\n \n#this\nis a constructor which is a method that is called when an object is created/constructed\n\n\n#self\nis just a pointer to the own specific object, don't worry about it too much\n  def\n__init__(self,\nname,\nage, major):\n    self.name = name\n    self.age = age \n    self.major\n= major  \n\n\n #this\nis a method that displays my info\n  def getStudentInfo(self):\n    print('name:',\nself.name)\n\n\n  print('age:', self.age)\n    print('major:', self.major)\n\n\nVansh = Student('Vansh\nNagpal',20,'Computer\nScience')\nVansh.getStudentInfo()#Output'Vansh\nNagpal'\n20\n'Computer\nScience'",
            "slide_title": "Classes and Objects"
          },
          {
            "description": "Inheritance and Polymorphism are the height of what one can achieve with OOP.\nInheritance\nallows\nyou\nto declare a class that will act as the parent, and then declare a class that\nwill\nact\nas the child.\nThe child class expands upon the capabilities of the parent, or\n'inherits'\nthe\nparent's capabilities.\nThis goes back to the concept of reusability in code.\nIf\nit\nis not\nnecessary to write more code, then why should you?\nPolymorphism is a way for\nobjects\nof\ndifferent classes to implement certain capabilities in different ways.\nSpecificallyit\nrefers\nto\nfunctions that child classes implement or override in different ways.\nHere is\nan example\nof\nboth polymorphism and inheritance in python:\n\n#Here the cat and dog classes\ninherit\nfrom\nthe animal class:\nclass Animal:\n  def __init__(self, name, age):\n    self.age\n= age\n\n \n self.name = name\n\n  def makeASound(self)\n    print(\"this will be overriden\")\n\n#dog\nis\na\nchild of animal, hence (Animal)\nclass Dog(Animal):\n  def __init(self, name, age, breed)\n\n\n\n super().__init(name, age)#calls parent constructor\n    self.breed = breed\n\n  def makeASound(self):\n\n\n\n print(\"BARK\")\n\n#cat is a child of animal, hence (Animal)\nclass Cat(Animal):\n  def __init(self,\nname,\nage,\ncolor)\n    super().__init(name, age)#calls parent constructor\n    self.color\n= color\n\n\n\ndef makeASound(self):\n    print(\"MEOW MEOW\")  \n\ndog = Dog('rex', 3,'golden retriever')\ncat\n=\nCat('jenna',\n2, 'black and white')\ndog.makeASound()#Output: BARK\ncat.makeASound()#Ouput:\nMEOW\nMEOW",
            "slide_title": "Inheritance and Polymorphism"
          }
        ],
        "module_title": "Object-Oriented Programming (OOP)"
      },
      {
        "module_comments": [],
        "quiz": [],
        "slides": [
          {
            "description": "Now that we have covered the meat of programming, let's cover some advanced\nthings\nyou\ncan do in python, starting with .... MACHINE LEARNING!!!\nPython is the premier\nlanguage\nfor\ndata analysis in the modern world, which also makes it easy to implement simple\nmachine\nlearning\nalgorithms on.\nLibraries and modules such as numpy, pandas, matplotlib,\nand so\nmany more\nmake statistical analysis of sets of data very user friendly.\nThe following\nis\nan example\nof an unsupervised machine learning algorithm that implements k means scattering.\nThe\npoint\nof\nthis algorithm is to seperate a given set of points into k subgroups.\nIt uses\nall of\nthe\ntechniques we have learned up to this point including OOP and functions\n\nimport\nnumpy\nas\nnp\nimport matplotlib.pyplot as plt\nfrom sklearn.preprocessing import StandardScaler\nfrom\nnumpy.random\nimport\nuniform\nfrom sklearn.datasets import make_blobs\nimport seaborn as sns\nimport\nrandom\ndef\neuclidean(point,\ndata):\n    \"\"\"\n    Euclidean distance between point & data.\n\n   Point\nhas dimensions (m,),\ndata has dimensions (n,m), and output will be of size (n,).\n\n   \"\"\"\n\n   return np.sqrt(np.sum((point\n- data)**2, axis=1))\nclass KMeans:\n    def __init__(self,\nn_clusters=8,\nmax_iter=300):\n\n       self.n_clusters = n_clusters\n        self.max_iter\n= max_iter\n \n  def fit(self,\nX_train):\n        # Initialize the centroids, using the \"k-means++\"\nmethod,\nwhere a random\ndatapoint is selected as the first,\n        # then the rest are\ninitialized\nw/ probabilities\nproportional to their distances to the first\n        # Pick\na random point\nfrom train data\nfor first centroi\n        self.centroids = [random.choice(X_train)]\n\n \n     for _ in range(self.n_clusters-1):\n\n           # Calculate distances from points\nto\nthe centroids\n            dists = np.sum([euclidean(centroid,\nX_train) for centroid\nin\nself.centroids], axis=0)\n            # Normalize the distances\n\n           dists /=\nnp.sum(dists)\n\n           # Choose remaining points based on their\ndistances\n         \n  new_centroid_idx,\n= np.random.choice(range(len(X_train)), size=1,\np=dists)\n         \n  self.centroids +=\n[X_train[new_centroid_idx]]\n        # This initial\nmethod of randomly\nselecting centroid\nstarts is less effective\n        # min_, max_ = np.min(X_train,\naxis=0),\nnp.max(X_train,\naxis=0)\n        # self.centroids = [uniform(min_, max_) for _\nin range(self.n_clusters)]\n\n\n      # Iterate, adjusting centroids until converged or until\npassed max_iter\n       \niteration\n= 0\n        prev_centroids = None\n        while np.not_equal(self.centroids,\nprev_centroids).any()\nand\niteration < self.max_iter:\n            # Sort each datapoint,\nassigning to nearest\ncentroid\n\n           sorted_points = [[] for _ in range(self.n_clusters)]\n\n           for\nx in X_train:\n\n               dists = euclidean(x, self.centroids)\n    \n           centroid_idx\n= np.argmin(dists)\n\n               sorted_points[centroid_idx].append(x)\n\n           #\nPush current centroids\nto previous, reassign centroids as mean of the points\nbelonging\nto them\n            prev_centroids\n= self.centroids\n            self.centroids\n= [np.mean(cluster,\naxis=0) for cluster in\nsorted_points]\n            for i, centroid in\nenumerate(self.centroids):\n\n            \n  if np.isnan(centroid).any():  # Catch any np.nans,\nresulting from a centroid\nhaving no\npoints\n                    self.centroids[i] = prev_centroids[i]\n\n          \niteration\n+= 1\n    def evaluate(self, X):\n        centroids = []\n        centroid_idxs\n=\n[]\n    \n   for x in X:\n            dists = euclidean(x, self.centroids)\n            centroid_idx\n=\nnp.argmin(dists)\n\n           centroids.append(self.centroids[centroid_idx])\n        \n \n centroid_idxs.append(centroid_idx)\n\n       return centroids, centroid_idxs\n# Create\na\ndataset of 2D distributions\ncenters =\n5\nX_train, true_labels = make_blobs(n_samples=100,\ncenters=centers,\nrandom_state=42)\nX_train\n= StandardScaler().fit_transform(X_train)\n# Fit\ncentroids to dataset\nkmeans\n= KMeans(n_clusters=centers)\nkmeans.fit(X_train)\n#\nView results\nclass_centers,\nclassification\n= kmeans.evaluate(X_train)\nsns.scatterplot(x=[X[0]\nfor X in X_train],\n \n              y=[X[1]\nfor X in X_train],\n                hue=true_labels,\n\n           \n   style=classification,\n\n               palette=\"deep\",\n                legend=None\n\n\n              )\nplt.plot([x\nfor x, _ in kmeans.centroids],\n         [y for _, y in kmeans.centroids],\n\n\n       'k+',\n\n        markersize=10,\n         )\nplt.show()",
            "slide_title": "Machine Learning in Python"
          }
        ],
        "module_title": "Python Advanced Topics and Applications"
      }
    ]
  }
]
